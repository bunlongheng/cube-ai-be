import dayjs from 'dayjs';
export type SqlInterval = string;
export type ParsedInterval = Record<string, number>;
export type Granularity = {
    interval: SqlInterval;
    origin?: string;
    offset?: SqlInterval;
};
export type DayRange = {
    by: (value: any) => dayjs.Dayjs[];
    snapTo: (value: any) => DayRange;
    start: dayjs.Dayjs;
    end: dayjs.Dayjs;
};
export type TimeDimensionPredefinedGranularity = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';
export type TimeDimensionGranularity = TimeDimensionPredefinedGranularity | string;
export type TGranularityMap = {
    name: TimeDimensionGranularity | undefined;
    title: string;
};
export declare const GRANULARITIES: TGranularityMap[];
export declare const DEFAULT_GRANULARITY = "day";
export declare const internalDayjs: (...args: any[]) => dayjs.Dayjs;
export declare const TIME_SERIES: Record<string, (range: DayRange) => string[]>;
export declare const isPredefinedGranularity: (granularity: TimeDimensionGranularity) => boolean;
export declare const DateRegex: RegExp;
export declare const LocalDateRegex: RegExp;
export declare const dayRange: (from: any, to: any) => DayRange;
/**
 * Parse PostgreSQL-like interval string into object
 * E.g. '2 years 15 months 100 weeks 99 hours 15 seconds'
 * Negative units are also supported
 * E.g. '-2 months 5 days -10 hours'
 *
 * TODO: It's copy/paste of parseSqlInterval from @cubejs-backend/shared [time.ts]
 * It's not referenced to omit imports of moment.js staff.
 * Probably one day we should choose one implementation and reuse it in other places.
 */
export declare function parseSqlInterval(intervalStr: SqlInterval): ParsedInterval;
/**
 * Adds interval to provided date.
 * TODO: It's copy/paste of addInterval from @cubejs-backend/shared [time.ts]
 * but operates with dayjs instead of moment.js
 * @param {dayjs} date
 * @param interval
 * @returns {dayjs}
 */
export declare function addInterval(date: dayjs.Dayjs, interval: ParsedInterval): dayjs.Dayjs;
/**
 * Adds interval to provided date.
 * TODO: It's copy/paste of subtractInterval from @cubejs-backend/shared [time.ts]
 * but operates with dayjs instead of moment.js
 * @param {dayjs} date
 * @param interval
 * @returns {dayjs}
 */
export declare function subtractInterval(date: dayjs.Dayjs, interval: ParsedInterval): dayjs.Dayjs;
/**
 * Returns the time series points for the custom interval
 * TODO: It's almost a copy/paste of timeSeriesFromCustomInterval from
 * @cubejs-backend/shared [time.ts] but operates with dayjs instead of moment.js
 */
export declare const timeSeriesFromCustomInterval: (from: string, to: string, granularity: Granularity) => string[];
/**
 * Returns the lowest time unit for the interval
 */
export declare const diffTimeUnitForInterval: (interval: string) => string;
export declare const minGranularityForIntervals: (i1: string, i2: string) => string;
export declare const granularityFor: (dateStr: string) => string;
//# sourceMappingURL=time.d.ts.map