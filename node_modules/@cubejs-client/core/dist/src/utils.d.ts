import { DeeplyReadonly } from './index';
import { Filter, PivotConfig, Query, QueryOrder, TDefaultHeuristicsOptions, TDefaultHeuristicsResponse, TDefaultHeuristicsState, TFlatFilter, TOrderMember, TQueryOrderArray, TQueryOrderObject, TSourceAxis } from './types';
export declare function removeEmptyQueryFields(_query: DeeplyReadonly<Query>): {
    [index: string]: string | number | boolean | readonly string[] | readonly DeeplyReadonly<Filter>[] | readonly DeeplyReadonly<import("./types").TimeDimension>[] | DeeplyReadonly<TQueryOrderObject> | readonly (readonly [string, DeeplyReadonly<QueryOrder>])[] | null | undefined;
};
export declare function validateQuery(_query: DeeplyReadonly<Query> | null | undefined): Query;
export declare function areQueriesEqual(query1: DeeplyReadonly<Query> | null, query2: DeeplyReadonly<Query> | null): boolean;
export declare function defaultOrder(query: DeeplyReadonly<Query>): {
    [key: string]: QueryOrder;
};
export declare function defaultHeuristics(newState: TDefaultHeuristicsState, oldQuery: Query, options: TDefaultHeuristicsOptions): TDefaultHeuristicsResponse;
export declare function isQueryPresent(query: DeeplyReadonly<Query | Query[]> | null | undefined): boolean;
export declare function movePivotItem(pivotConfig: PivotConfig, sourceIndex: number, destinationIndex: number, sourceAxis: TSourceAxis, destinationAxis: TSourceAxis): PivotConfig;
export declare function moveItemInArray<T = any>(list: T[], sourceIndex: number, destinationIndex: number): T[];
export declare function flattenFilters(filters?: Filter[]): TFlatFilter[];
export declare function getQueryMembers(query?: DeeplyReadonly<Query>): string[];
export declare function getOrderMembersFromOrder(orderMembers: any[], order: TQueryOrderObject | TQueryOrderArray): TOrderMember[];
export declare function aliasSeries(values: string[], index: number, pivotConfig?: Partial<PivotConfig>, duplicateMeasures?: Set<string>): (string | number)[];
//# sourceMappingURL=utils.d.ts.map