import { Cube, CubesMap, MemberType, MetaResponse, TCubeMeasure, TCubeDimension, TCubeMember, TCubeMemberByType, Query, FilterOperator, TCubeSegment, NotFoundMember } from './types';
import { DeeplyReadonly } from './index';
export interface CubeMemberWrapper<T> {
    cubeName: string;
    cubeTitle: string;
    type: 'view' | 'cube';
    public: boolean;
    members: T[];
}
export type AggregatedMembers = {
    measures: CubeMemberWrapper<TCubeMeasure>[];
    dimensions: CubeMemberWrapper<TCubeDimension>[];
    segments: CubeMemberWrapper<TCubeSegment>[];
    timeDimensions: CubeMemberWrapper<TCubeDimension>[];
};
/**
 * Contains information about available cubes and it's members.
 */
export default class Meta {
    /**
     * Raw meta response
     */
    readonly meta: MetaResponse;
    /**
     * An array of all available cubes with their members
     */
    readonly cubes: Cube[];
    /**
     * A map of all cubes where the key is a cube name
     */
    readonly cubesMap: CubesMap;
    constructor(metaResponse: MetaResponse);
    /**
     * Get all members of a specific type for a given query.
     * If empty query is provided no filtering is done based on query context and all available members are retrieved.
     * @param _query - context query to provide filtering of members available to add to this query
     * @param memberType
     */
    membersForQuery(_query: DeeplyReadonly<Query> | null, memberType: MemberType): (TCubeMeasure | TCubeDimension | TCubeMember | TCubeSegment)[];
    membersGroupedByCube(): AggregatedMembers;
    /**
     * Get meta information for a cube member
     * meta information contains:
     * ```javascript
     * {
     *   name,
     *   title,
     *   shortTitle,
     *   type,
     *   description,
     *   format
     * }
     * ```
     * @param memberName - Fully qualified member name in a form `Cube.memberName`
     * @param memberType
     * @return An object containing meta information about member
     */
    resolveMember<T extends MemberType>(memberName: string, memberType: T | T[]): NotFoundMember | TCubeMemberByType<T>;
    defaultTimeDimensionNameFor(memberName: string): string | null | undefined;
    filterOperatorsForMember(memberName: string, memberType: MemberType | MemberType[]): FilterOperator[];
}
//# sourceMappingURL=Meta.d.ts.map