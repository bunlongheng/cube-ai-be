{"version":3,"file":"cubejs-client-core.umd.js","sources":["../src/time.ts","../src/utils.ts","../src/ResultSet.ts","../src/SqlQuery.ts","../src/Meta.ts","../src/ProgressResult.ts","../src/HttpTransport.ts","../src/RequestError.ts","../src/index.ts","../src/index.umd.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport quarterOfYear from 'dayjs/plugin/quarterOfYear';\nimport duration from 'dayjs/plugin/duration';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport en from 'dayjs/locale/en';\n\ndayjs.extend(quarterOfYear);\ndayjs.extend(duration);\ndayjs.extend(isoWeek);\n\nexport type SqlInterval = string;\n\n// TODO: Define a better type as unitOfTime.DurationConstructor in moment.js\nexport type ParsedInterval = Record<string, number>;\n\nexport type Granularity = {\n  interval: SqlInterval;\n  origin?: string;\n  offset?: SqlInterval;\n};\n\nexport type DayRange = {\n  by: (value: any) => dayjs.Dayjs[];\n  snapTo: (value: any) => DayRange;\n  start: dayjs.Dayjs;\n  end: dayjs.Dayjs;\n};\n\nexport type TimeDimensionPredefinedGranularity =\n  'second'\n  | 'minute'\n  | 'hour'\n  | 'day'\n  | 'week'\n  | 'month'\n  | 'quarter'\n  | 'year';\n\nexport type TimeDimensionGranularity = TimeDimensionPredefinedGranularity | string;\n\nexport type TGranularityMap = {\n  name: TimeDimensionGranularity | undefined;\n  title: string;\n};\n\nexport const GRANULARITIES: TGranularityMap[] = [\n  { name: undefined, title: 'w/o grouping' },\n  { name: 'second', title: 'Second' },\n  { name: 'minute', title: 'Minute' },\n  { name: 'hour', title: 'Hour' },\n  { name: 'day', title: 'Day' },\n  { name: 'week', title: 'Week' },\n  { name: 'month', title: 'Month' },\n  { name: 'quarter', title: 'Quarter' },\n  { name: 'year', title: 'Year' },\n];\n\nexport const DEFAULT_GRANULARITY = 'day';\n\n// When granularity is week, weekStart Value must be 1. However, since the client can change it globally\n// (https://day.js.org/docs/en/i18n/changing-locale) So the function below has been added.\nexport const internalDayjs = (...args: any[]): dayjs.Dayjs => dayjs(...args).locale({ ...en, weekStart: 1 });\n\nexport const TIME_SERIES: Record<string, (range: DayRange) => string[]> = {\n  day: (range) => range.by('d').map(d => d.format('YYYY-MM-DDT00:00:00.000')),\n  month: (range) => range.snapTo('month').by('M').map(d => d.format('YYYY-MM-01T00:00:00.000')),\n  year: (range) => range.snapTo('year').by('y').map(d => d.format('YYYY-01-01T00:00:00.000')),\n  hour: (range) => range.by('h').map(d => d.format('YYYY-MM-DDTHH:00:00.000')),\n  minute: (range) => range.by('m').map(d => d.format('YYYY-MM-DDTHH:mm:00.000')),\n  second: (range) => range.by('s').map(d => d.format('YYYY-MM-DDTHH:mm:ss.000')),\n  week: (range) => range.snapTo('week').by('w').map(d => d.startOf('week').format('YYYY-MM-DDT00:00:00.000')),\n  quarter: (range) => range.snapTo('quarter').by('quarter').map(d => d.startOf('quarter').format(\n    'YYYY-MM-DDT00:00:00.000'\n  )),\n};\n\nexport const isPredefinedGranularity = (granularity: TimeDimensionGranularity): boolean => !!TIME_SERIES[granularity];\n\nexport const DateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\nexport const LocalDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?$/;\n\nexport const dayRange = (from: any, to: any): DayRange => ({\n  by: (value: any) => {\n    const results = [];\n\n    let start = internalDayjs(from);\n    const end = internalDayjs(to);\n\n    while (start.isBefore(end) || start.isSame(end)) {\n      results.push(start);\n      start = start.add(1, value);\n    }\n\n    return results;\n  },\n  snapTo: (value: any): DayRange => dayRange(internalDayjs(from).startOf(value), internalDayjs(to).endOf(value)),\n  start: internalDayjs(from),\n  end: internalDayjs(to),\n});\n\n/**\n * Parse PostgreSQL-like interval string into object\n * E.g. '2 years 15 months 100 weeks 99 hours 15 seconds'\n * Negative units are also supported\n * E.g. '-2 months 5 days -10 hours'\n *\n * TODO: It's copy/paste of parseSqlInterval from @cubejs-backend/shared [time.ts]\n * It's not referenced to omit imports of moment.js staff.\n * Probably one day we should choose one implementation and reuse it in other places.\n */\nexport function parseSqlInterval(intervalStr: SqlInterval): ParsedInterval {\n  const interval: ParsedInterval = {};\n  const parts = intervalStr.split(/\\s+/);\n\n  for (let i = 0; i < parts.length; i += 2) {\n    const value = parseInt(parts[i], 10);\n    const unit = parts[i + 1];\n\n    // Remove ending 's' (e.g., 'days' -> 'day')\n    const singularUnit = unit.endsWith('s') ? unit.slice(0, -1) : unit;\n    interval[singularUnit] = value;\n  }\n\n  return interval;\n}\n\n/**\n * Adds interval to provided date.\n * TODO: It's copy/paste of addInterval from @cubejs-backend/shared [time.ts]\n * but operates with dayjs instead of moment.js\n * @param {dayjs} date\n * @param interval\n * @returns {dayjs}\n */\nexport function addInterval(date: dayjs.Dayjs, interval: ParsedInterval): dayjs.Dayjs {\n  let res = date.clone();\n\n  Object.entries(interval).forEach(([key, value]) => {\n    res = res.add(value, key);\n  });\n\n  return res;\n}\n\n/**\n * Adds interval to provided date.\n * TODO: It's copy/paste of subtractInterval from @cubejs-backend/shared [time.ts]\n * but operates with dayjs instead of moment.js\n * @param {dayjs} date\n * @param interval\n * @returns {dayjs}\n */\nexport function subtractInterval(date: dayjs.Dayjs, interval: ParsedInterval): dayjs.Dayjs {\n  let res = date.clone();\n\n  Object.entries(interval).forEach(([key, value]) => {\n    res = res.subtract(value, key);\n  });\n\n  return res;\n}\n\n/**\n * Returns the closest date prior to date parameter aligned with the origin point\n * TODO: It's copy/paste of alignToOrigin from @cubejs-backend/shared [time.ts]\n * but operates with dayjs instead of moment.js\n */\nfunction alignToOrigin(startDate: dayjs.Dayjs, interval: ParsedInterval, origin: dayjs.Dayjs): dayjs.Dayjs {\n  let alignedDate = startDate.clone();\n  let intervalOp;\n  let isIntervalNegative = false;\n\n  let offsetDate = addInterval(origin, interval);\n\n  // The easiest way to check the interval sign\n  if (offsetDate.isBefore(origin)) {\n    isIntervalNegative = true;\n  }\n\n  offsetDate = origin.clone();\n\n  if (startDate.isBefore(origin)) {\n    intervalOp = isIntervalNegative ? addInterval : subtractInterval;\n\n    while (offsetDate.isAfter(startDate)) {\n      offsetDate = intervalOp(offsetDate, interval);\n    }\n    alignedDate = offsetDate;\n  } else {\n    intervalOp = isIntervalNegative ? subtractInterval : addInterval;\n\n    while (offsetDate.isBefore(startDate)) {\n      alignedDate = offsetDate.clone();\n      offsetDate = intervalOp(offsetDate, interval);\n    }\n\n    if (offsetDate.isSame(startDate)) {\n      alignedDate = offsetDate;\n    }\n  }\n\n  return alignedDate;\n}\n\n/**\n * Returns the time series points for the custom interval\n * TODO: It's almost a copy/paste of timeSeriesFromCustomInterval from\n * @cubejs-backend/shared [time.ts] but operates with dayjs instead of moment.js\n */\nexport const timeSeriesFromCustomInterval = (from: string, to: string, granularity: Granularity): string[] => {\n  const intervalParsed = parseSqlInterval(granularity.interval);\n  const start = internalDayjs(from);\n  const end = internalDayjs(to);\n  let origin = granularity.origin ? internalDayjs(granularity.origin) : internalDayjs().startOf('year');\n  if (granularity.offset) {\n    origin = addInterval(origin, parseSqlInterval(granularity.offset));\n  }\n  let alignedStart = alignToOrigin(start, intervalParsed, origin);\n\n  const dates = [];\n\n  while (alignedStart.isBefore(end) || alignedStart.isSame(end)) {\n    dates.push(alignedStart.format('YYYY-MM-DDTHH:mm:ss.000'));\n    alignedStart = addInterval(alignedStart, intervalParsed);\n  }\n\n  return dates;\n};\n\n/**\n * Returns the lowest time unit for the interval\n */\nexport const diffTimeUnitForInterval = (interval: string): string => {\n  if (/second/i.test(interval)) {\n    return 'second';\n  } else if (/minute/i.test(interval)) {\n    return 'minute';\n  } else if (/hour/i.test(interval)) {\n    return 'hour';\n  } else if (/day/i.test(interval)) {\n    return 'day';\n  } else if (/week/i.test(interval)) {\n    return 'day';\n  } else if (/month/i.test(interval)) {\n    return 'month';\n  } else if (/quarter/i.test(interval)) {\n    return 'month';\n  } else /* if (/year/i.test(interval)) */ {\n    return 'year';\n  }\n};\n\nconst granularityOrder = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second'];\n\nexport const minGranularityForIntervals = (i1: string, i2: string): string => {\n  const g1 = diffTimeUnitForInterval(i1);\n  const g2 = diffTimeUnitForInterval(i2);\n  const g1pos = granularityOrder.indexOf(g1);\n  const g2pos = granularityOrder.indexOf(g2);\n\n  if (g1pos > g2pos) {\n    return g1;\n  }\n\n  return g2;\n};\n\nexport const granularityFor = (dateStr: string): string => {\n  const dayjsDate = internalDayjs(dateStr);\n  const month = dayjsDate.month();\n  const date = dayjsDate.date();\n  const hours = dayjsDate.hour();\n  const minutes = dayjsDate.minute();\n  const seconds = dayjsDate.second();\n  const milliseconds = dayjsDate.millisecond();\n  const weekDay = dayjsDate.isoWeekday();\n\n  if (\n    month === 0 &&\n    date === 1 &&\n    hours === 0 &&\n    minutes === 0 &&\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'year';\n  } else if (\n    date === 1 &&\n    hours === 0 &&\n    minutes === 0 &&\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'month';\n  } else if (\n    weekDay === 1 &&\n    hours === 0 &&\n    minutes === 0 &&\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'week';\n  } else if (\n    hours === 0 &&\n    minutes === 0 &&\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'day';\n  } else if (\n    minutes === 0 &&\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'hour';\n  } else if (\n    seconds === 0 &&\n    milliseconds === 0\n  ) {\n    return 'minute';\n  } else if (\n    milliseconds === 0\n  ) {\n    return 'second';\n  }\n\n  return 'second'; // TODO return 'millisecond';\n};\n","import { clone, equals, fromPairs, indexBy, prop, toPairs } from 'ramda';\nimport { DeeplyReadonly } from './index';\nimport { DEFAULT_GRANULARITY } from './time';\nimport {\n  Filter,\n  PivotConfig,\n  Query,\n  QueryOrder,\n  TDefaultHeuristicsOptions,\n  TDefaultHeuristicsResponse,\n  TDefaultHeuristicsState,\n  TFlatFilter,\n  TOrderMember,\n  TQueryOrderArray,\n  TQueryOrderObject,\n  TSourceAxis\n} from './types';\n\nexport function removeEmptyQueryFields(_query: DeeplyReadonly<Query>) {\n  const query = _query || {};\n\n  return fromPairs(\n    toPairs(query).flatMap(([key, value]) => {\n      if (\n        ['measures', 'dimensions', 'segments', 'timeDimensions', 'filters'].includes(key)\n      ) {\n        if (Array.isArray(value) && value.length === 0) {\n          return [];\n        }\n      }\n\n      if (key === 'order' && value) {\n        if (Array.isArray(value) && value.length === 0) {\n          return [];\n        } else if (!Object.keys(value).length) {\n          return [];\n        }\n      }\n\n      return [[key, value]];\n    })\n  );\n}\n\nexport function validateQuery(_query: DeeplyReadonly<Query> | null | undefined): Query {\n  const query = _query || {};\n\n  return removeEmptyQueryFields({\n    ...query,\n    filters: (query.filters || []).filter((f) => 'operator' in f),\n    timeDimensions: (query.timeDimensions || []).filter(\n      (td) => !(!td.dateRange && !td.granularity)\n    ),\n  });\n}\n\nexport function areQueriesEqual(query1: DeeplyReadonly<Query> | null, query2: DeeplyReadonly<Query> | null): boolean {\n  return (\n    equals(\n      Object.entries(query1?.order || {}),\n      Object.entries(query2?.order || {})\n    ) && equals(query1, query2)\n  );\n}\n\nexport function defaultOrder(query: DeeplyReadonly<Query>): { [key: string]: QueryOrder } {\n  const granularity = (query.timeDimensions || []).find((d) => d.granularity);\n\n  if (granularity) {\n    return {\n      [granularity.dimension]: 'asc',\n    };\n  } else if (\n    (query.measures || []).length > 0 &&\n    (query.dimensions || []).length > 0\n  ) {\n    return {\n      [query.measures![0]]: 'desc',\n    };\n  } else if ((query.dimensions || []).length > 0) {\n    return {\n      [query.dimensions![0]]: 'asc',\n    };\n  }\n\n  return {};\n}\n\nexport function defaultHeuristics(\n  newState: TDefaultHeuristicsState,\n  oldQuery: Query,\n  options: TDefaultHeuristicsOptions\n): TDefaultHeuristicsResponse {\n  const { query, ...props } = clone(newState);\n  const { meta, sessionGranularity } = options;\n  const granularity = sessionGranularity || DEFAULT_GRANULARITY;\n\n  let state: TDefaultHeuristicsResponse = {\n    shouldApplyHeuristicOrder: false,\n    pivotConfig: null,\n    query,\n    ...props,\n  };\n\n  let newQuery = null;\n  if (!areQueriesEqual(query, oldQuery)) {\n    newQuery = query;\n  }\n\n  if (Array.isArray(newQuery) || Array.isArray(oldQuery)) {\n    return {\n      shouldApplyHeuristicOrder: false,\n      pivotConfig: null,\n      ...newState,\n    };\n  }\n\n  if (newQuery) {\n    if (\n      (oldQuery.timeDimensions || []).length === 1 &&\n      (newQuery.timeDimensions || []).length === 1 &&\n      newQuery.timeDimensions![0].granularity &&\n      oldQuery.timeDimensions![0].granularity !==\n        newQuery.timeDimensions![0].granularity\n    ) {\n      state = {\n        ...state,\n        sessionGranularity: newQuery.timeDimensions![0].granularity,\n      };\n    }\n\n    if (\n      ((oldQuery.measures || []).length === 0 &&\n        (newQuery.measures || []).length > 0) ||\n      ((oldQuery.measures || []).length === 1 &&\n        (newQuery.measures || []).length === 1 &&\n        oldQuery.measures![0] !== newQuery.measures![0])\n    ) {\n      const [td] = newQuery.timeDimensions || [];\n      const defaultTimeDimension = meta.defaultTimeDimensionNameFor(\n        newQuery.measures![0]\n      );\n      newQuery = {\n        ...newQuery,\n        timeDimensions: defaultTimeDimension\n          ? [\n            {\n              dimension: defaultTimeDimension,\n              granularity: td?.granularity || granularity,\n              dateRange: td?.dateRange,\n            },\n          ]\n          : [],\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: defaultTimeDimension ? 'line' : 'number',\n      };\n    }\n\n    if (\n      (oldQuery.dimensions || []).length === 0 &&\n      (newQuery.dimensions || []).length > 0\n    ) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: (newQuery.timeDimensions || []).map((td) => ({\n          ...td,\n          granularity: undefined,\n        })),\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: 'table',\n      };\n    }\n\n    if (\n      (oldQuery.dimensions || []).length > 0 &&\n      (newQuery.dimensions || []).length === 0\n    ) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: (newQuery.timeDimensions || []).map((td) => ({\n          ...td,\n          granularity: td.granularity || granularity,\n        })),\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: (newQuery.timeDimensions || []).length ? 'line' : 'number',\n      };\n    }\n\n    if (\n      ((oldQuery.dimensions || []).length > 0 ||\n        (oldQuery.measures || []).length > 0) &&\n      (newQuery.dimensions || []).length === 0 &&\n      (newQuery.measures || []).length === 0\n    ) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: [],\n        filters: [],\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        sessionGranularity: null,\n      };\n    }\n    return state;\n  }\n\n  if (state.chartType) {\n    const newChartType = state.chartType;\n    if (\n      (newChartType === 'line' || newChartType === 'area') &&\n      (oldQuery.timeDimensions || []).length === 1 &&\n      !oldQuery.timeDimensions![0].granularity\n    ) {\n      const [td] = oldQuery.timeDimensions!;\n      return {\n        ...state,\n        pivotConfig: null,\n        query: {\n          ...oldQuery,\n          timeDimensions: [{ ...td, granularity }],\n        },\n      };\n    }\n\n    if (\n      (newChartType === 'pie' ||\n        newChartType === 'table' ||\n        newChartType === 'number') &&\n      (oldQuery.timeDimensions || []).length === 1 &&\n      oldQuery.timeDimensions![0].granularity\n    ) {\n      const [td] = oldQuery.timeDimensions!;\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: {\n          ...oldQuery,\n          timeDimensions: [{ ...td, granularity: undefined }],\n        },\n      };\n    }\n  }\n\n  return state;\n}\n\nexport function isQueryPresent(query: DeeplyReadonly<Query | Query[]> | null | undefined): boolean {\n  if (!query) {\n    return false;\n  }\n\n  return (Array.isArray(query) ? query : [query]).every(\n    (q) => q.measures?.length || q.dimensions?.length || q.timeDimensions?.length\n  );\n}\n\nexport function movePivotItem(\n  pivotConfig: PivotConfig,\n  sourceIndex: number,\n  destinationIndex: number,\n  sourceAxis: TSourceAxis,\n  destinationAxis: TSourceAxis\n): PivotConfig {\n  const nextPivotConfig = {\n    ...pivotConfig,\n    x: [...(pivotConfig.x || [])],\n    y: [...(pivotConfig.y || [])],\n  };\n  const id = pivotConfig[sourceAxis]![sourceIndex];\n  const lastIndex = nextPivotConfig[destinationAxis].length - 1;\n\n  if (id === 'measures') {\n    destinationIndex = lastIndex + 1;\n  } else if (\n    sourceAxis === destinationAxis &&\n    destinationIndex >= lastIndex &&\n    nextPivotConfig[destinationAxis][lastIndex] === 'measures'\n  ) {\n    destinationIndex = lastIndex - 1;\n  } else if (\n    sourceAxis !== destinationAxis &&\n    destinationIndex > lastIndex &&\n    nextPivotConfig[destinationAxis][lastIndex] === 'measures'\n  ) {\n    destinationIndex = lastIndex;\n  }\n\n  nextPivotConfig[sourceAxis].splice(sourceIndex, 1);\n  nextPivotConfig[destinationAxis].splice(destinationIndex, 0, id);\n\n  return nextPivotConfig;\n}\n\nexport function moveItemInArray<T = any>(list: T[], sourceIndex: number, destinationIndex: number): T[] {\n  const result = [...list];\n  const [removed] = result.splice(sourceIndex, 1);\n  result.splice(destinationIndex, 0, removed);\n\n  return result;\n}\n\nexport function flattenFilters(filters: Filter[] = []): TFlatFilter[] {\n  return filters.reduce<TFlatFilter[]>((memo, filter) => {\n    if ('or' in filter) {\n      return [...memo, ...flattenFilters(filter.or)];\n    }\n\n    if ('and' in filter) {\n      return [...memo, ...flattenFilters(filter.and)];\n    }\n\n    return [...memo, filter];\n  }, []);\n}\n\nexport function getQueryMembers(query: DeeplyReadonly<Query> = {}): string[] {\n  const keys = ['measures', 'dimensions', 'segments'] as const;\n  const members = new Set<string>();\n\n  keys.forEach((key) => (query[key] || []).forEach((member) => members.add(member)));\n  (query.timeDimensions || []).forEach((td) => members.add(td.dimension));\n\n  const filters = flattenFilters(query.filters as Filter[]);\n  filters.forEach((filter) => {\n    const member = filter.dimension || filter.member;\n    if (typeof member === 'string') {\n      members.add(member);\n    }\n  });\n\n  return [...members];\n}\n\nexport function getOrderMembersFromOrder(orderMembers: any[], order: TQueryOrderObject | TQueryOrderArray): TOrderMember[] {\n  const ids = new Set<string>();\n  const indexedOrderMembers = indexBy(prop('id'), orderMembers);\n  const entries = Array.isArray(order) ? order : Object.entries(order || {});\n  const nextOrderMembers: TOrderMember[] = [];\n\n  entries.forEach(([memberId, currentOrder]) => {\n    if (currentOrder !== 'none' && indexedOrderMembers[memberId]) {\n      ids.add(memberId);\n      nextOrderMembers.push({\n        ...indexedOrderMembers[memberId],\n        order: currentOrder,\n      });\n    }\n  });\n  orderMembers.forEach((member) => {\n    if (!ids.has(member.id)) {\n      nextOrderMembers.push({\n        ...member,\n        order: member.order || 'none',\n      });\n    }\n  });\n\n  return nextOrderMembers;\n}\n\nexport function aliasSeries(values: string[], index: number, pivotConfig?: Partial<PivotConfig>, duplicateMeasures: Set<string> = new Set()) {\n  const nonNullValues = values.filter((value: any) => value != null);\n\n  if (pivotConfig?.aliasSeries?.[index]) {\n    return [pivotConfig.aliasSeries[index], ...nonNullValues];\n  } else if (duplicateMeasures.has(nonNullValues[0])) {\n    return [index, ...nonNullValues];\n  }\n\n  return nonNullValues;\n}\n","import dayjs from 'dayjs';\nimport {\n  groupBy, pipe, fromPairs, uniq, map, dropLast, equals, reduce, minBy, maxBy, clone, mergeDeepLeft,\n  flatten,\n} from 'ramda';\n\nimport { aliasSeries } from './utils';\nimport {\n  DateRegex,\n  dayRange,\n  internalDayjs,\n  isPredefinedGranularity,\n  LocalDateRegex,\n  TIME_SERIES,\n  timeSeriesFromCustomInterval\n} from './time';\nimport {\n  Annotation,\n  ChartPivotRow, DateRange,\n  DrillDownLocator,\n  LoadResponse,\n  LoadResponseResult, Pivot,\n  PivotConfig, PivotConfigFull,\n  PivotQuery,\n  PivotRow,\n  Query,\n  QueryAnnotations, QueryType,\n  SerializedResult,\n  Series,\n  SeriesNamesColumn,\n  TableColumn,\n  TimeDimension\n} from './types';\n\nconst groupByToPairs = function groupByToPairsImpl<T, K>(keyFn: (item: T) => K): (data: T[]) => [K, T[]][] {\n  const acc = new Map();\n\n  return (data) => {\n    data.forEach((row) => {\n      const key = keyFn(row);\n\n      if (!acc.has(key)) {\n        acc.set(key, []);\n      }\n\n      acc.get(key).push(row);\n    });\n\n    return Array.from(acc.entries());\n  };\n};\n\nconst unnest = (arr: any[][]): any[] => {\n  const res: any[] = [];\n  arr.forEach((subArr) => {\n    subArr.forEach(element => res.push(element));\n  });\n\n  return res;\n};\n\nexport const QUERY_TYPE: Record<string, QueryType> = {\n  REGULAR_QUERY: 'regularQuery',\n  COMPARE_DATE_RANGE_QUERY: 'compareDateRangeQuery',\n  BLENDING_QUERY: 'blendingQuery',\n};\n\nexport type ResultSetOptions = {\n  parseDateMeasures?: boolean;\n};\n\n/**\n * Provides a convenient interface for data manipulation.\n */\nexport default class ResultSet<T extends Record<string, any> = any> {\n  private readonly loadResponse: LoadResponse<T>;\n\n  private readonly loadResponses: LoadResponseResult<T>[];\n\n  private readonly queryType: QueryType;\n\n  private readonly parseDateMeasures: boolean | undefined;\n\n  private readonly options: {};\n\n  private readonly backwardCompatibleData: Record<string, any>[][];\n\n  public static measureFromAxis(axisValues: string[]): string {\n    return axisValues[axisValues.length - 1];\n  }\n\n  public static timeDimensionMember(td: TimeDimension) {\n    return `${td.dimension}.${td.granularity}`;\n  }\n\n  /**\n   * ```js\n   * import { ResultSet } from '@cubejs-client/core';\n   *\n   * const resultSet = await cubeApi.load(query);\n   * // You can store the result somewhere\n   * const tmp = resultSet.serialize();\n   *\n   * // and restore it later\n   * const resultSet = ResultSet.deserialize(tmp);\n   * ```\n   * @param data the result of [serialize](#result-set-serialize)\n   * @param options\n   */\n  public static deserialize<TData extends Record<string, any> = any>(data: SerializedResult, options?: Object): ResultSet<TData> {\n    return new ResultSet(data.loadResponse, options);\n  }\n\n  public constructor(loadResponse: LoadResponse<T> | LoadResponseResult<T>, options: ResultSetOptions = {}) {\n    if ('queryType' in loadResponse && loadResponse.queryType != null) {\n      this.loadResponse = loadResponse;\n      this.queryType = loadResponse.queryType;\n      this.loadResponses = loadResponse.results;\n    } else {\n      this.queryType = QUERY_TYPE.REGULAR_QUERY;\n      this.loadResponse = {\n        ...loadResponse,\n        pivotQuery: {\n          ...loadResponse.query,\n          queryType: this.queryType\n        }\n      } as LoadResponse<T>;\n      this.loadResponses = [loadResponse as LoadResponseResult<T>];\n    }\n\n    if (!Object.values(QUERY_TYPE).includes(this.queryType)) {\n      throw new Error('Unknown query type');\n    }\n\n    this.parseDateMeasures = options.parseDateMeasures;\n    this.options = options;\n\n    this.backwardCompatibleData = [];\n  }\n\n  /**\n   * Returns a measure drill down query.\n   *\n   * Provided you have a measure with the defined `drillMembers` on the `Orders` cube\n   * ```js\n   * measures: {\n   *   count: {\n   *     type: `count`,\n   *     drillMembers: [Orders.status, Users.city, count],\n   *   },\n   *   // ...\n   * }\n   * ```\n   *\n   * Then you can use the `drillDown` method to see the rows that contribute to that metric\n   * ```js\n   * resultSet.drillDown(\n   *   {\n   *     xValues,\n   *     yValues,\n   *   },\n   *   // you should pass the `pivotConfig` if you have used it for axes manipulation\n   *   pivotConfig\n   * )\n   * ```\n   *\n   * the result will be a query with the required filters applied and the dimensions/measures filled out\n   * ```js\n   * {\n   *   measures: ['Orders.count'],\n   *   dimensions: ['Orders.status', 'Users.city'],\n   *   filters: [\n   *     // dimension and measure filters\n   *   ],\n   *   timeDimensions: [\n   *     //...\n   *   ]\n   * }\n   * ```\n   *\n   * In case when you want to add `order` or `limit` to the query, you can simply spread it\n   *\n   * ```js\n   * // An example for React\n   * const drillDownResponse = useCubeQuery(\n   *    {\n   *      ...drillDownQuery,\n   *      limit: 30,\n   *      order: {\n   *        'Orders.ts': 'desc'\n   *      }\n   *    },\n   *    {\n   *      skip: !drillDownQuery\n   *    }\n   *  );\n   * ```\n   * @returns Drill down query\n   */\n  public drillDown(drillDownLocator: DrillDownLocator, pivotConfig?: PivotConfig): Query | null {\n    if (this.queryType === QUERY_TYPE.COMPARE_DATE_RANGE_QUERY) {\n      throw new Error('compareDateRange drillDown query is not currently supported');\n    }\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      throw new Error('Data blending drillDown query is not currently supported');\n    }\n\n    const { query } = this.loadResponses[0];\n    const xValues = drillDownLocator?.xValues ?? [];\n    const yValues = drillDownLocator?.yValues ?? [];\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);\n\n    const values: string[][] = [];\n    normalizedPivotConfig?.x.forEach((member, currentIndex) => values.push([member, xValues[currentIndex]]));\n    normalizedPivotConfig?.y.forEach((member, currentIndex) => values.push([member, yValues[currentIndex]]));\n\n    const { filters: parentFilters = [], segments = [] } = this.query();\n    const { measures } = this.loadResponses[0].annotation;\n    let [, measureName] = values.find(([member]) => member === 'measures') || [];\n\n    if (measureName === undefined) {\n      [measureName] = Object.keys(measures);\n    }\n\n    if (!(measures[measureName]?.drillMembers?.length ?? 0)) {\n      return null;\n    }\n\n    const filters = [\n      {\n        member: measureName,\n        operator: 'measureFilter',\n      },\n      ...parentFilters\n    ];\n    const timeDimensions = [];\n\n    values.filter(([member]) => member !== 'measures')\n      .forEach(([member, value]) => {\n        const [cubeName, dimension, granularity] = member.split('.');\n\n        if (granularity !== undefined) {\n          const range = dayRange(value, value).snapTo(granularity);\n          const originalTimeDimension = query.timeDimensions?.find((td) => td.dimension);\n\n          let dateRange = [\n            range.start,\n            range.end\n          ];\n\n          if (originalTimeDimension?.dateRange) {\n            const [originalStart, originalEnd] = originalTimeDimension.dateRange;\n\n            dateRange = [\n              dayjs(originalStart) > range.start ? dayjs(originalStart) : range.start,\n              dayjs(originalEnd) < range.end ? dayjs(originalEnd) : range.end,\n            ];\n          }\n\n          timeDimensions.push({\n            dimension: [cubeName, dimension].join('.'),\n            dateRange: dateRange.map((dt) => dt.format('YYYY-MM-DDTHH:mm:ss.SSS')),\n          });\n        } else if (value == null) {\n          filters.push({\n            member,\n            operator: 'notSet',\n          });\n        } else {\n          filters.push({\n            member,\n            operator: 'equals',\n            values: [value.toString()],\n          });\n        }\n      });\n\n    if (\n      timeDimensions.length === 0 &&\n      Array.isArray(query.timeDimensions) &&\n      query.timeDimensions.length > 0 &&\n      query.timeDimensions[0].granularity == null\n    ) {\n      timeDimensions.push(query.timeDimensions[0]);\n    }\n\n    return {\n      ...measures[measureName].drillMembersGrouped,\n      filters,\n      ...(segments.length > 0 ? { segments } : {}),\n      timeDimensions,\n      segments,\n      timezone: query.timezone\n    };\n  }\n\n  /**\n   * Returns an array of series with key, title and series data.\n   * ```js\n   * // For the query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-12-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.series() will return\n   * [\n   *   {\n   *     key: 'Stories.count',\n   *     title: 'Stories Count',\n   *     shortTitle: 'Count',\n   *     series: [\n   *       { x: '2015-01-01T00:00:00', value: 27120 },\n   *       { x: '2015-02-01T00:00:00', value: 25861 },\n   *       { x: '2015-03-01T00:00:00', value: 29661 },\n   *       //...\n   *     ],\n   *   },\n   * ]\n   * ```\n   */\n  public series<SeriesItem = any>(pivotConfig?: PivotConfig): Series<SeriesItem>[] {\n    return this.seriesNames(pivotConfig).map(({ title, shortTitle, key }) => ({\n      title,\n      shortTitle,\n      key,\n      series: this.chartPivot(pivotConfig).map(({ x, ...obj }) => ({ value: obj[key], x }))\n    } as Series<SeriesItem>));\n  }\n\n  private axisValues(axis: string[], resultIndex = 0) {\n    const { query } = this.loadResponses[resultIndex];\n\n    return (row: Record<string, any>) => {\n      const value = (measure?: string) => axis\n        .filter(d => d !== 'measures')\n        .map((d: string) => {\n          const val = row[d];\n          return val != null ? val : null;\n        })\n        .concat(measure ? [measure] : []);\n\n      if (axis.find(d => d === 'measures') && (query.measures || []).length) {\n        return (query.measures || []).map(value);\n      }\n\n      return [value()];\n    };\n  }\n\n  private axisValuesString(axisValues: (string | number)[], delimiter: string = ', '): string {\n    const formatValue = (v: string | number) => {\n      if (v == null) {\n        return '∅';\n      } else if (v === '') {\n        return '[Empty string]';\n      } else {\n        return v;\n      }\n    };\n    return axisValues.map(formatValue).join(delimiter);\n  }\n\n  public static getNormalizedPivotConfig(query?: PivotQuery, pivotConfig?: PivotConfig): PivotConfigFull {\n    const defaultPivotConfig: PivotConfig = {\n      x: [],\n      y: [],\n      fillMissingDates: true,\n      joinDateRange: false\n    };\n\n    const {\n      measures = [],\n      dimensions = []\n    } = query || {};\n\n    const timeDimensions = (query?.timeDimensions || []).filter(td => !!td.granularity);\n\n    pivotConfig = pivotConfig || (timeDimensions.length ? {\n      x: timeDimensions.map(td => ResultSet.timeDimensionMember(td)),\n      y: dimensions\n    } : {\n      x: dimensions,\n      y: []\n    });\n\n    const normalizedPivotConfig = mergeDeepLeft(pivotConfig, defaultPivotConfig) as PivotConfigFull;\n\n    const substituteTimeDimensionMembers = (axis: string[]) => axis.map(\n      subDim => (\n        (\n          timeDimensions.find(td => td.dimension === subDim) &&\n          !dimensions.find(d => d === subDim)\n        ) ?\n          ResultSet.timeDimensionMember((query?.timeDimensions || []).find(td => td.dimension === subDim)!) :\n          subDim\n      )\n    );\n\n    normalizedPivotConfig.x = substituteTimeDimensionMembers(normalizedPivotConfig.x);\n    normalizedPivotConfig.y = substituteTimeDimensionMembers(normalizedPivotConfig.y);\n\n    const allIncludedDimensions = normalizedPivotConfig.x.concat(normalizedPivotConfig.y);\n    const allDimensions = timeDimensions.map(td => ResultSet.timeDimensionMember(td)).concat(dimensions);\n\n    const dimensionFilter = (key: string) => allDimensions.includes(key) || key === 'measures';\n\n    normalizedPivotConfig.x = normalizedPivotConfig.x.concat(\n      allDimensions.filter(d => !allIncludedDimensions.includes(d) && d !== 'compareDateRange')\n    )\n      .filter(dimensionFilter);\n    normalizedPivotConfig.y = normalizedPivotConfig.y.filter(dimensionFilter);\n\n    if (!normalizedPivotConfig.x.concat(normalizedPivotConfig.y).find(d => d === 'measures')) {\n      normalizedPivotConfig.y.push('measures');\n    }\n\n    if (dimensions.includes('compareDateRange') && !normalizedPivotConfig.y.concat(normalizedPivotConfig.x).includes('compareDateRange')) {\n      normalizedPivotConfig.y.unshift('compareDateRange');\n    }\n\n    if (!measures.length) {\n      normalizedPivotConfig.x = normalizedPivotConfig.x.filter(d => d !== 'measures');\n      normalizedPivotConfig.y = normalizedPivotConfig.y.filter(d => d !== 'measures');\n    }\n\n    return normalizedPivotConfig;\n  }\n\n  public normalizePivotConfig(pivotConfig?: PivotConfig): PivotConfigFull {\n    return ResultSet.getNormalizedPivotConfig(this.loadResponse.pivotQuery, pivotConfig);\n  }\n\n  public timeSeries(timeDimension: TimeDimension, resultIndex?: number, annotations?: Record<string, Annotation>) {\n    if (!timeDimension.granularity) {\n      return null;\n    }\n\n    let dateRange: DateRange | null | undefined;\n    dateRange = timeDimension.dateRange;\n\n    if (!dateRange) {\n      const member = ResultSet.timeDimensionMember(timeDimension);\n      const rawRows: Record<string, any>[] = this.timeDimensionBackwardCompatibleData(resultIndex || 0);\n\n      const dates = rawRows\n        .map(row => {\n          const value = row[member];\n          return value ? internalDayjs(value) : null;\n        })\n        .filter((d): d is dayjs.Dayjs => Boolean(d));\n\n      dateRange = dates.length && [\n        (reduce(minBy((d: dayjs.Dayjs): Date => d.toDate()), dates[0], dates)).toString(),\n        (reduce(maxBy((d: dayjs.Dayjs): Date => d.toDate()), dates[0], dates)).toString(),\n      ] || null;\n    }\n\n    if (!dateRange) {\n      return null;\n    }\n\n    const padToDay = timeDimension.dateRange ?\n      (timeDimension.dateRange as string[]).find(d => d.match(DateRegex)) :\n      !['hour', 'minute', 'second'].includes(timeDimension.granularity);\n\n    const [start, end] = dateRange;\n    const range = dayRange(start, end);\n\n    if (isPredefinedGranularity(timeDimension.granularity)) {\n      return TIME_SERIES[timeDimension.granularity](\n        padToDay ? range.snapTo('d') : range\n      );\n    }\n\n    if (!annotations?.[`${timeDimension.dimension}.${timeDimension.granularity}`]) {\n      throw new Error(`Granularity \"${timeDimension.granularity}\" not found in time dimension \"${timeDimension.dimension}\"`);\n    }\n\n    return timeSeriesFromCustomInterval(\n      start, end, annotations[`${timeDimension.dimension}.${timeDimension.granularity}`].granularity!\n    );\n  }\n\n  /**\n   * Base method for pivoting [ResultSet](#result-set) data.\n   * Most of the time shouldn't be used directly and [chartPivot](#result-set-chart-pivot)\n   * or [tablePivot](#table-pivot) should be used instead.\n   *\n   * You can find the examples of using the `pivotConfig` [here](#types-pivot-config)\n   * ```js\n   * // For query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-03-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.pivot({ x: ['Stories.time'], y: ['measures'] }) will return\n   * [\n   *   {\n   *     xValues: [\"2015-01-01T00:00:00\"],\n   *     yValuesArray: [\n   *       [['Stories.count'], 27120]\n   *     ]\n   *   },\n   *   {\n   *     xValues: [\"2015-02-01T00:00:00\"],\n   *     yValuesArray: [\n   *       [['Stories.count'], 25861]\n   *     ]\n   *   },\n   *   {\n   *     xValues: [\"2015-03-01T00:00:00\"],\n   *     yValuesArray: [\n   *       [['Stories.count'], 29661]\n   *     ]\n   *   }\n   * ]\n   * ```\n   * @returns An array of pivoted rows.\n   */\n  public pivot(pivotConfig?: PivotConfig): PivotRow[] {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);\n    const { pivotQuery: query } = this.loadResponse;\n\n    const pivotImpl = (resultIndex = 0) => {\n      let groupByXAxis = groupByToPairs<{ xValues: string[], row: Record<string, any> }, string>(({ xValues }) => this.axisValuesString(xValues));\n\n      const measureValue = (row: Record<string, any>, measure: string) => row[measure] || normalizedPivotConfig.fillWithValue || 0;\n\n      if (\n        normalizedPivotConfig.fillMissingDates &&\n        normalizedPivotConfig.x.length === 1 &&\n        (equals(\n          normalizedPivotConfig.x,\n          (query.timeDimensions || [])\n            .filter(td => Boolean(td.granularity))\n            .map(td => ResultSet.timeDimensionMember(td))\n        ))\n      ) {\n        const series = this.loadResponses.map(\n          (loadResponse) => this.timeSeries(\n            loadResponse.query.timeDimensions![0],\n            resultIndex, loadResponse.annotation.timeDimensions\n          )\n        );\n\n        if (series[0]) {\n          groupByXAxis = (rows) => {\n            const byXValues = groupBy(\n              ({ xValues }) => xValues[0],\n              rows\n            );\n            return series[resultIndex]?.map(d => [d, byXValues[d] || [{ xValues: [d], row: {} }]]) ?? [];\n          };\n        }\n      }\n\n      const xGrouped: [string, { xValues: string[], row: Record<string, any> }[]][] = pipe(\n        map((row: Record<string, any>) => this.axisValues(normalizedPivotConfig.x, resultIndex)(row).map(xValues => ({ xValues, row }))),\n        unnest,\n        groupByXAxis\n      )(this.timeDimensionBackwardCompatibleData(resultIndex));\n\n      const yValuesMap: Record<string, any> = {};\n      xGrouped.forEach(([, rows]) => {\n        rows.forEach(({ row }) => {\n          this.axisValues(normalizedPivotConfig.y, resultIndex)(row).forEach((values) => {\n            if (Object.keys(row).length > 0) {\n              yValuesMap[values.join()] = values;\n            }\n          });\n        });\n      });\n      const allYValues = Object.values(yValuesMap);\n\n      const measureOnX = Boolean((normalizedPivotConfig.x).find(d => d === 'measures'));\n\n      return xGrouped.map(([, rows]) => {\n        const { xValues } = rows[0];\n        const yGrouped: Record<string, any> = {};\n\n        rows.forEach(({ row }) => {\n          const arr = this.axisValues(normalizedPivotConfig.y, resultIndex)(row).map(yValues => ({ yValues, row }));\n          arr.forEach((res) => {\n            yGrouped[this.axisValuesString(res.yValues)] = res;\n          });\n        });\n\n        return {\n          xValues,\n          yValuesArray: unnest(allYValues.map(yValues => {\n            const measure = measureOnX ?\n              ResultSet.measureFromAxis(xValues) :\n              ResultSet.measureFromAxis(yValues);\n\n            return [[yValues, measureValue((yGrouped[this.axisValuesString(yValues)] ||\n              ({ row: {} })).row, measure)]];\n          }))\n        };\n      });\n    };\n\n    const pivots = this.loadResponses.length > 1\n      ? this.loadResponses.map((_, index) => pivotImpl(index))\n      : [];\n\n    return pivots.length\n      ? this.mergePivots(pivots, normalizedPivotConfig.joinDateRange || false)\n      : pivotImpl();\n  }\n\n  private mergePivots(pivots: Pivot[][], joinDateRange: ((pivots: Pivot, joinDateRange: any) => PivotRow[]) | false): PivotRow[] {\n    const minLengthPivot: Pivot[] = pivots.reduce<Pivot[] | null>(\n      (memo, current) => (memo != null && current.length >= memo.length ? memo : current), null\n    ) || [];\n\n    return minLengthPivot.map((_: any, index: number) => {\n      const xValues = joinDateRange\n        ? [pivots.map((pivot) => pivot[index]?.xValues || []).join(', ')]\n        : minLengthPivot[index].xValues;\n\n      return {\n        xValues,\n        yValuesArray: unnest(pivots.map((pivot) => pivot[index].yValuesArray))\n      };\n    });\n  }\n\n  /**\n   * Returns normalized query result data in the following format.\n   *\n   * You can find the examples of using the `pivotConfig` [here](#types-pivot-config)\n   * ```js\n   * // For the query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-12-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.chartPivot() will return\n   * [\n   *   { \"x\":\"2015-01-01T00:00:00\", \"Stories.count\": 27120, \"xValues\": [\"2015-01-01T00:00:00\"] },\n   *   { \"x\":\"2015-02-01T00:00:00\", \"Stories.count\": 25861, \"xValues\": [\"2015-02-01T00:00:00\"]  },\n   *   { \"x\":\"2015-03-01T00:00:00\", \"Stories.count\": 29661, \"xValues\": [\"2015-03-01T00:00:00\"]  },\n   *   //...\n   * ]\n   *\n   * ```\n   * When using `chartPivot()` or `seriesNames()`, you can pass `aliasSeries` in the [pivotConfig](#types-pivot-config)\n   * to give each series a unique prefix. This is useful for `blending queries` which use the same measure multiple times.\n   *\n   * ```js\n   * // For the queries\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [\n   *     {\n   *       dimension: 'Stories.time',\n   *       dateRange: ['2015-01-01', '2015-12-31'],\n   *       granularity: 'month',\n   *     },\n   *   ],\n   * },\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [\n   *     {\n   *       dimension: 'Stories.time',\n   *       dateRange: ['2015-01-01', '2015-12-31'],\n   *       granularity: 'month',\n   *     },\n   *   ],\n   *   filters: [\n   *     {\n   *       member: 'Stores.read',\n   *       operator: 'equals',\n   *       value: ['true'],\n   *     },\n   *   ],\n   * },\n   *\n   * // ResultSet.chartPivot({ aliasSeries: ['one', 'two'] }) will return\n   * [\n   *   {\n   *     x: '2015-01-01T00:00:00',\n   *     'one,Stories.count': 27120,\n   *     'two,Stories.count': 8933,\n   *     xValues: ['2015-01-01T00:00:00'],\n   *   },\n   *   {\n   *     x: '2015-02-01T00:00:00',\n   *     'one,Stories.count': 25861,\n   *     'two,Stories.count': 8344,\n   *     xValues: ['2015-02-01T00:00:00'],\n   *   },\n   *   {\n   *     x: '2015-03-01T00:00:00',\n   *     'one,Stories.count': 29661,\n   *     'two,Stories.count': 9023,\n   *     xValues: ['2015-03-01T00:00:00'],\n   *   },\n   *   //...\n   * ]\n   * ```\n   */\n  public chartPivot(pivotConfig?: PivotConfig): ChartPivotRow[] {\n    const validate = (value: string) => {\n      if (this.parseDateMeasures && LocalDateRegex.test(value)) {\n        return new Date(value);\n      } else if (!Number.isNaN(Number.parseFloat(value))) {\n        return Number.parseFloat(value);\n      }\n\n      return value;\n    };\n\n    const duplicateMeasures = new Set<string>();\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      const allMeasures = flatten(this.loadResponses.map(({ query }) => query.measures ?? []));\n      allMeasures.filter((e, i, a) => a.indexOf(e) !== i).forEach(m => duplicateMeasures.add(m));\n    }\n\n    return this.pivot(pivotConfig).map(({ xValues, yValuesArray }) => {\n      const yValuesMap: Record<string, number | string | Date> = {};\n\n      yValuesArray\n        .forEach(([yValues, m]: [string[], string], i: number) => {\n          yValuesMap[this.axisValuesString(aliasSeries(yValues, i, pivotConfig, duplicateMeasures), ',')] = m && validate(m);\n        });\n\n      return ({\n        x: this.axisValuesString(xValues, ','),\n        xValues,\n        ...yValuesMap\n      } as ChartPivotRow);\n    });\n  }\n\n  /**\n   * Returns normalized query result data prepared for visualization in the table format.\n   *\n   * You can find the examples of using the `pivotConfig` [here](#types-pivot-config)\n   *\n   * For example:\n   * ```js\n   * // For the query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-12-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.tablePivot() will return\n   * [\n   *   { \"Stories.time\": \"2015-01-01T00:00:00\", \"Stories.count\": 27120 },\n   *   { \"Stories.time\": \"2015-02-01T00:00:00\", \"Stories.count\": 25861 },\n   *   { \"Stories.time\": \"2015-03-01T00:00:00\", \"Stories.count\": 29661 },\n   *   //...\n   * ]\n   * ```\n   * @returns An array of pivoted rows\n   */\n  public tablePivot(pivotConfig?: PivotConfig): Array<{ [key: string]: string | number | boolean }> {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n    const isMeasuresPresent = normalizedPivotConfig.x.concat(normalizedPivotConfig.y).includes('measures');\n\n    return this.pivot(normalizedPivotConfig).map(({ xValues, yValuesArray }) => fromPairs(\n      [\n        ...(normalizedPivotConfig.x).map((key, index): [string, string | number] => [\n          key,\n          xValues[index] ?? ''\n        ]),\n        ...(isMeasuresPresent\n          ? yValuesArray.map(([yValues, measure]): [string, string | number] => [\n            yValues.length ? yValues.join() : 'value',\n            measure\n          ])\n          : [])\n      ]\n    ));\n  }\n\n  /**\n   * Returns an array of column definitions for `tablePivot`.\n   *\n   * For example:\n   * ```js\n   * // For the query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-12-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.tableColumns() will return\n   * [\n   *   {\n   *     key: 'Stories.time',\n   *     dataIndex: 'Stories.time',\n   *     title: 'Stories Time',\n   *     shortTitle: 'Time',\n   *     type: 'time',\n   *     format: undefined,\n   *   },\n   *   {\n   *     key: 'Stories.count',\n   *     dataIndex: 'Stories.count',\n   *     title: 'Stories Count',\n   *     shortTitle: 'Count',\n   *     type: 'count',\n   *     format: undefined,\n   *   },\n   *   //...\n   * ]\n   * ```\n   *\n   * In case we want to pivot the table axes\n   * ```js\n   * // Let's take this query as an example\n   * {\n   *   measures: ['Orders.count'],\n   *   dimensions: ['Users.country', 'Users.gender']\n   * }\n   *\n   * // and put the dimensions on `y` axis\n   * resultSet.tableColumns({\n   *   x: [],\n   *   y: ['Users.country', 'Users.gender', 'measures']\n   * })\n   * ```\n   *\n   * then `tableColumns` will group the table head and return\n   * ```js\n   * {\n   *   key: 'Germany',\n   *   type: 'string',\n   *   title: 'Users Country Germany',\n   *   shortTitle: 'Germany',\n   *   meta: undefined,\n   *   format: undefined,\n   *   children: [\n   *     {\n   *       key: 'male',\n   *       type: 'string',\n   *       title: 'Users Gender male',\n   *       shortTitle: 'male',\n   *       meta: undefined,\n   *       format: undefined,\n   *       children: [\n   *         {\n   *           // ...\n   *           dataIndex: 'Germany.male.Orders.count',\n   *           shortTitle: 'Count',\n   *         },\n   *       ],\n   *     },\n   *     {\n   *       // ...\n   *       shortTitle: 'female',\n   *       children: [\n   *         {\n   *           // ...\n   *           dataIndex: 'Germany.female.Orders.count',\n   *           shortTitle: 'Count',\n   *         },\n   *       ],\n   *     },\n   *   ],\n   * },\n   * // ...\n   * ```\n   * @returns An array of columns\n   */\n  public tableColumns(pivotConfig?: PivotConfig): TableColumn[] {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n\n    const annotations: QueryAnnotations = this.loadResponses\n      .map((r) => r.annotation)\n      .reduce<QueryAnnotations>((acc, annotation) => mergeDeepLeft(acc, annotation) as QueryAnnotations,\n        {\n          dimensions: {},\n          measures: {},\n          timeDimensions: {},\n          segments: {},\n        });\n\n    const flatMeta = Object.values(annotations).reduce((a, b) => ({ ...a, ...b }), {});\n    const schema: Record<string, any> = {};\n\n    const extractFields = (key: string) => {\n      const { title, shortTitle, type, format, meta } = flatMeta[key] || {};\n\n      return {\n        key,\n        title,\n        shortTitle,\n        type,\n        format,\n        meta\n      };\n    };\n\n    const pivot = this.pivot(normalizedPivotConfig);\n\n    (pivot[0]?.yValuesArray || []).forEach(([yValues]) => {\n      if (yValues.length > 0) {\n        let currentItem = schema;\n\n        yValues.forEach((value, index) => {\n          currentItem[`_${value}`] = {\n            key: value,\n            memberId: normalizedPivotConfig.y[index] === 'measures'\n              ? value\n              : normalizedPivotConfig.y[index],\n            children: currentItem[`_${value}`]?.children || {}\n          };\n\n          currentItem = currentItem[`_${value}`].children;\n        });\n      }\n    });\n\n    const toColumns = (item: Record<string, any> = {}, path: string[] = []): TableColumn[] => {\n      if (Object.keys(item).length === 0) {\n        return [];\n      }\n\n      return Object.values(item).map(({ key, ...currentItem }) => {\n        const children = toColumns(currentItem.children, [\n          ...path,\n          key\n        ]);\n\n        const { title, shortTitle, ...fields } = extractFields(currentItem.memberId);\n\n        const dimensionValue = key !== currentItem.memberId || title == null ? key : '';\n\n        if (!children.length) {\n          return {\n            ...fields,\n            key,\n            dataIndex: [...path, key].join(),\n            title: [title, dimensionValue].join(' ').trim(),\n            shortTitle: dimensionValue || shortTitle,\n          } as TableColumn;\n        }\n\n        return {\n          ...fields,\n          key,\n          title: [title, dimensionValue].join(' ').trim(),\n          shortTitle: dimensionValue || shortTitle,\n          children,\n        } as TableColumn;\n      });\n    };\n\n    let otherColumns: TableColumn[] = [];\n\n    if (!pivot.length && normalizedPivotConfig.y.includes('measures')) {\n      otherColumns = (this.loadResponses[0].query.measures || []).map(\n        (key) => ({ ...extractFields(key), dataIndex: key })\n      );\n    }\n\n    // Synthetic column to display the measure value\n    if (!normalizedPivotConfig.y.length && normalizedPivotConfig.x.includes('measures')) {\n      otherColumns.push({\n        key: 'value',\n        dataIndex: 'value',\n        title: 'Value',\n        shortTitle: 'Value',\n        type: 'string',\n      });\n    }\n\n    return (normalizedPivotConfig.x).map((key) => {\n      if (key === 'measures') {\n        return {\n          key: 'measures',\n          dataIndex: 'measures',\n          title: 'Measures',\n          shortTitle: 'Measures',\n          type: 'string',\n        } as TableColumn;\n      }\n\n      return ({ ...extractFields(key), dataIndex: key });\n    })\n      .concat(toColumns(schema))\n      .concat(otherColumns);\n  }\n\n  public totalRow(pivotConfig?: PivotConfig): ChartPivotRow {\n    return this.chartPivot(pivotConfig)[0];\n  }\n\n  public categories(pivotConfig?: PivotConfig): ChartPivotRow[] {\n    return this.chartPivot(pivotConfig);\n  }\n\n  /**\n   * Returns an array of series objects, containing `key` and `title` parameters.\n   * ```js\n   * // For query\n   * {\n   *   measures: ['Stories.count'],\n   *   timeDimensions: [{\n   *     dimension: 'Stories.time',\n   *     dateRange: ['2015-01-01', '2015-12-31'],\n   *     granularity: 'month'\n   *   }]\n   * }\n   *\n   * // ResultSet.seriesNames() will return\n   * [\n   *   {\n   *     key: 'Stories.count',\n   *     title: 'Stories Count',\n   *     shortTitle: 'Count',\n   *     yValues: ['Stories.count'],\n   *   },\n   * ]\n   * ```\n   * @returns An array of series names\n   */\n  public seriesNames(pivotConfig?: PivotConfig): SeriesNamesColumn[] {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);\n    const measures = this.loadResponses\n      .map(r => r.annotation.measures)\n      .reduce((acc, m) => ({ ...acc, ...m }), {});\n\n    const seriesNames = unnest(this.loadResponses.map((_, index) => pipe(\n      map(this.axisValues(normalizedPivotConfig.y, index)),\n      unnest,\n      uniq\n    )(\n      this.timeDimensionBackwardCompatibleData(index)\n    )));\n\n    const duplicateMeasures = new Set<string>();\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      const allMeasures = flatten(this.loadResponses.map(({ query }) => query.measures ?? []));\n      allMeasures.filter((e, i, a) => a.indexOf(e) !== i).forEach(m => duplicateMeasures.add(m));\n    }\n\n    return seriesNames.map((axisValues, i) => {\n      const aliasedAxis = aliasSeries(axisValues, i, normalizedPivotConfig, duplicateMeasures);\n      return {\n        title: this.axisValuesString(\n          normalizedPivotConfig.y.find(d => d === 'measures') ?\n            dropLast(1, aliasedAxis).concat(\n              measures[\n                ResultSet.measureFromAxis(axisValues)\n              ].title\n            ) :\n            aliasedAxis, ', '\n        ),\n        shortTitle: this.axisValuesString(\n          normalizedPivotConfig.y.find(d => d === 'measures') ?\n            dropLast(1, aliasedAxis).concat(\n              measures[\n                ResultSet.measureFromAxis(axisValues)\n              ].shortTitle\n            ) :\n            aliasedAxis, ', '\n        ),\n        key: this.axisValuesString(aliasedAxis, ','),\n        yValues: axisValues\n      };\n    });\n  }\n\n  public query(): Query {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].query;\n  }\n\n  public pivotQuery(): PivotQuery {\n    return this.loadResponse.pivotQuery || null;\n  }\n\n  /**\n   * @return the total number of rows if the `total` option was set, when sending the query\n   */\n  public totalRows(): number | null | undefined {\n    return this.loadResponses[0].total;\n  }\n\n  public rawData(): T[] {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].data;\n  }\n\n  public annotation(): QueryAnnotations {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].annotation;\n  }\n\n  private timeDimensionBackwardCompatibleData(resultIndex: number) {\n    if (resultIndex === undefined) {\n      throw new Error('resultIndex is required');\n    }\n\n    if (!this.backwardCompatibleData[resultIndex]) {\n      const { data, query } = this.loadResponses[resultIndex];\n      const timeDimensions = (query.timeDimensions || []).filter(td => Boolean(td.granularity));\n\n      this.backwardCompatibleData[resultIndex] = data.map(row => (\n        {\n          ...row,\n          ...(\n            fromPairs(Object.keys(row)\n              .filter(\n                field => {\n                  const foundTd = timeDimensions.find(d => d.dimension === field);\n                  return foundTd && !row[ResultSet.timeDimensionMember(foundTd)];\n                }\n              ).map(field => (\n                [ResultSet.timeDimensionMember(timeDimensions.find(d => d.dimension === field)!), row[field]]\n              )))\n          )\n        }\n      ));\n    }\n\n    return this.backwardCompatibleData[resultIndex];\n  }\n\n  /**\n   * Can be used when you need access to the methods that can't be used with some query types (eg `compareDateRangeQuery` or `blendingQuery`)\n   * ```js\n   * resultSet.decompose().forEach((currentResultSet) => {\n   *   console.log(currentResultSet.rawData());\n   * });\n   * ```\n   */\n  public decompose(): ResultSet<any>[] {\n    return this.loadResponses.map((result) => new ResultSet({\n      queryType: QUERY_TYPE.REGULAR_QUERY,\n      pivotQuery: {\n        ...result.query,\n        queryType: QUERY_TYPE.REGULAR_QUERY,\n      },\n      results: [result]\n    }, this.options));\n  }\n\n  /**\n   * Can be used to stash the `ResultSet` in a storage and restored later with [deserialize](#result-set-deserialize)\n   */\n  public serialize(): SerializedResult {\n    return {\n      loadResponse: clone(this.loadResponse)\n    };\n  }\n}\n","export type SqlQueryTuple = [string, any[], any?];\n\nexport type SqlData = {\n  aliasNameToMember: Record<string, string>;\n  cacheKeyQueries: SqlQueryTuple[];\n  dataSource: string;\n  external: boolean;\n  sql: SqlQueryTuple;\n  preAggregations: any[];\n  rollupMatchResults: any[];\n};\n\nexport type SqlQueryWrapper = { sql: SqlData };\n\nexport default class SqlQuery {\n  private readonly sqlQuery: SqlQueryWrapper;\n\n  public constructor(sqlQuery: SqlQueryWrapper) {\n    this.sqlQuery = sqlQuery;\n  }\n\n  public rawQuery(): SqlData {\n    return this.sqlQuery.sql;\n  }\n\n  public sql(): string {\n    return this.rawQuery().sql[0];\n  }\n}\n","import { unnest, fromPairs } from 'ramda';\nimport {\n  Cube,\n  CubesMap,\n  MemberType,\n  MetaResponse,\n  TCubeMeasure,\n  TCubeDimension,\n  TCubeMember,\n  TCubeMemberByType,\n  Query,\n  FilterOperator,\n  TCubeSegment,\n  NotFoundMember,\n} from './types';\nimport { DeeplyReadonly } from './index';\n\nexport interface CubeMemberWrapper<T> {\n  cubeName: string;\n  cubeTitle: string;\n  type: 'view' | 'cube';\n  public: boolean;\n  members: T[];\n}\n\nexport type AggregatedMembers = {\n  measures: CubeMemberWrapper<TCubeMeasure>[];\n  dimensions: CubeMemberWrapper<TCubeDimension>[];\n  segments: CubeMemberWrapper<TCubeSegment>[];\n  timeDimensions: CubeMemberWrapper<TCubeDimension>[];\n};\n\nconst memberMap = (memberArray: any[]) => fromPairs(\n  memberArray.map((m) => [m.name, m])\n);\n\nconst operators = {\n  string: [\n    { name: 'contains', title: 'contains' },\n    { name: 'notContains', title: 'does not contain' },\n    { name: 'equals', title: 'equals' },\n    { name: 'notEquals', title: 'does not equal' },\n    { name: 'set', title: 'is set' },\n    { name: 'notSet', title: 'is not set' },\n    { name: 'startsWith', title: 'starts with' },\n    { name: 'notStartsWith', title: 'does not start with' },\n    { name: 'endsWith', title: 'ends with' },\n    { name: 'notEndsWith', title: 'does not end with' },\n  ],\n  number: [\n    { name: 'equals', title: 'equals' },\n    { name: 'notEquals', title: 'does not equal' },\n    { name: 'set', title: 'is set' },\n    { name: 'notSet', title: 'is not set' },\n    { name: 'gt', title: '>' },\n    { name: 'gte', title: '>=' },\n    { name: 'lt', title: '<' },\n    { name: 'lte', title: '<=' },\n  ],\n  time: [\n    { name: 'equals', title: 'equals' },\n    { name: 'notEquals', title: 'does not equal' },\n    { name: 'inDateRange', title: 'in date range' },\n    { name: 'notInDateRange', title: 'not in date range' },\n    { name: 'afterDate', title: 'after date' },\n    { name: 'afterOrOnDate', title: 'after or on date' },\n    { name: 'beforeDate', title: 'before date' },\n    { name: 'beforeOrOnDate', title: 'before or on date' },\n  ],\n};\n\n/**\n * Contains information about available cubes and it's members.\n */\nexport default class Meta {\n  /**\n   * Raw meta response\n   */\n  public readonly meta: MetaResponse;\n\n  /**\n   * An array of all available cubes with their members\n   */\n  public readonly cubes: Cube[];\n\n  /**\n   * A map of all cubes where the key is a cube name\n   */\n  public readonly cubesMap: CubesMap;\n\n  public constructor(metaResponse: MetaResponse) {\n    this.meta = metaResponse;\n    const { cubes } = this.meta;\n    this.cubes = cubes;\n    this.cubesMap = fromPairs(\n      cubes.map((c) => [\n        c.name,\n        {\n          measures: memberMap(c.measures),\n          dimensions: memberMap(c.dimensions),\n          segments: memberMap(c.segments),\n        },\n      ])\n    );\n  }\n\n  /**\n   * Get all members of a specific type for a given query.\n   * If empty query is provided no filtering is done based on query context and all available members are retrieved.\n   * @param _query - context query to provide filtering of members available to add to this query\n   * @param memberType\n   */\n  public membersForQuery(_query: DeeplyReadonly<Query> | null, memberType: MemberType): (TCubeMeasure | TCubeDimension | TCubeMember | TCubeSegment)[] {\n    return unnest(this.cubes.map((c) => c[memberType]))\n      .sort((a, b) => (a.title > b.title ? 1 : -1));\n  }\n\n  public membersGroupedByCube() {\n    const memberKeys = ['measures', 'dimensions', 'segments', 'timeDimensions'];\n\n    return this.cubes.reduce<AggregatedMembers>(\n      (memo, cube) => {\n        memberKeys.forEach((key) => {\n          let members: TCubeMeasure[] | TCubeDimension[] | TCubeSegment[] = [];\n\n          // eslint-disable-next-line default-case\n          switch (key) {\n            case 'measures':\n              members = cube.measures || [];\n              break;\n            case 'dimensions':\n              members = cube.dimensions || [];\n              break;\n            case 'segments':\n              members = cube.segments || [];\n              break;\n            case 'timeDimensions':\n              members = cube.dimensions.filter((m) => m.type === 'time') || [];\n              break;\n          }\n\n          // TODO: Convince TS this is working\n          // @ts-ignore\n          memo[key].push({\n            cubeName: cube.name,\n            cubeTitle: cube.title,\n            type: cube.type,\n            public: cube.public,\n            members,\n          });\n        });\n\n        return memo;\n      },\n      {\n        measures: [],\n        dimensions: [],\n        segments: [],\n        timeDimensions: [],\n      } as AggregatedMembers\n    );\n  }\n\n  /**\n   * Get meta information for a cube member\n   * meta information contains:\n   * ```javascript\n   * {\n   *   name,\n   *   title,\n   *   shortTitle,\n   *   type,\n   *   description,\n   *   format\n   * }\n   * ```\n   * @param memberName - Fully qualified member name in a form `Cube.memberName`\n   * @param memberType\n   * @return An object containing meta information about member\n   */\n  public resolveMember<T extends MemberType>(\n    memberName: string,\n    memberType: T | T[]\n  ): NotFoundMember | TCubeMemberByType<T> {\n    const [cube] = memberName.split('.');\n\n    if (!this.cubesMap[cube]) {\n      return { title: memberName, error: `Cube not found ${cube} for path '${memberName}'` };\n    }\n\n    const memberTypes = Array.isArray(memberType) ? memberType : [memberType];\n    const member = memberTypes\n      .map((type) => this.cubesMap[cube][type] && this.cubesMap[cube][type][memberName])\n      .find((m) => m);\n\n    if (!member) {\n      return {\n        title: memberName,\n        error: `Path not found '${memberName}'`,\n      };\n    }\n\n    return member as TCubeMemberByType<T>;\n  }\n\n  public defaultTimeDimensionNameFor(memberName: string): string | null | undefined {\n    const [cube] = memberName.split('.');\n    if (!this.cubesMap[cube]) {\n      return null;\n    }\n    return Object.keys(this.cubesMap[cube].dimensions || {}).find(\n      (d) => this.cubesMap[cube].dimensions[d].type === 'time'\n    );\n  }\n\n  public filterOperatorsForMember(memberName: string, memberType: MemberType | MemberType[]): FilterOperator[] {\n    const member = this.resolveMember(memberName, memberType);\n\n    if ('error' in member || !('type' in member) || member.type === 'boolean') {\n      return operators.string;\n    }\n\n    return operators[member.type] || operators.string;\n  }\n}\n","import { ProgressResponse } from './types';\n\nexport default class ProgressResult {\n  private progressResponse: ProgressResponse;\n\n  public constructor(progressResponse: ProgressResponse) {\n    this.progressResponse = progressResponse;\n  }\n\n  public stage(): string {\n    return this.progressResponse.stage;\n  }\n\n  public timeElapsed(): number {\n    return this.progressResponse.timeElapsed;\n  }\n}\n","import fetch from 'cross-fetch';\nimport 'url-search-params-polyfill';\n\nexport interface ErrorResponse {\n  error: string;\n}\n\nexport type TransportOptions = {\n  /**\n   * [jwt auth token](security)\n   */\n  authorization?: string;\n  /**\n   * path to `/cubejs-api/v1`\n   */\n  apiUrl: string;\n  /**\n   * custom headers\n   */\n  headers: Record<string, string>;\n  credentials?: 'omit' | 'same-origin' | 'include';\n  method?: 'GET' | 'PUT' | 'POST' | 'PATCH';\n  /**\n   * Fetch timeout in milliseconds. Would be passed as AbortSignal.timeout()\n   */\n  fetchTimeout?: number;\n  /**\n   * AbortSignal to cancel requests\n   */\n  signal?: AbortSignal;\n};\n\nexport interface ITransportResponse<R> {\n  subscribe: <CBResult>(cb: (result: R | ErrorResponse, resubscribe: () => Promise<CBResult>) => CBResult) => Promise<CBResult>;\n  // Optional, supported in WebSocketTransport\n  unsubscribe?: () => Promise<void>;\n}\n\nexport interface ITransport<R> {\n  request(method: string, params: Record<string, unknown>): ITransportResponse<R>;\n  authorization: TransportOptions['authorization'];\n}\n\n/**\n * Default transport implementation.\n */\nexport class HttpTransport implements ITransport<Response> {\n  public authorization: TransportOptions['authorization'];\n\n  protected apiUrl: TransportOptions['apiUrl'];\n\n  protected method: TransportOptions['method'];\n\n  protected headers: TransportOptions['headers'];\n\n  protected credentials: TransportOptions['credentials'];\n\n  protected fetchTimeout: number | undefined;\n\n  private readonly signal: AbortSignal | undefined;\n\n  public constructor({ authorization, apiUrl, method, headers = {}, credentials, fetchTimeout, signal }: Omit<TransportOptions, 'headers'> & { headers?: TransportOptions['headers'] }) {\n    this.authorization = authorization;\n    this.apiUrl = apiUrl;\n    this.method = method;\n    this.headers = headers;\n    this.credentials = credentials;\n    this.fetchTimeout = fetchTimeout;\n    this.signal = signal;\n  }\n\n  public request(method: string, { baseRequestId, signal, ...params }: any): ITransportResponse<Response> {\n    let spanCounter = 1;\n    const searchParams = new URLSearchParams(\n      params && Object.keys(params)\n        .map(k => ({ [k]: typeof params[k] === 'object' ? JSON.stringify(params[k]) : params[k] }))\n        .reduce((a, b) => ({ ...a, ...b }), {})\n    );\n\n    let url = `${this.apiUrl}/${method}${searchParams.toString().length ? `?${searchParams}` : ''}`;\n\n    const requestMethod = this.method || (url.length < 2000 ? 'GET' : 'POST');\n    if (requestMethod === 'POST') {\n      url = `${this.apiUrl}/${method}`;\n      this.headers['Content-Type'] = 'application/json';\n    }\n\n    // Currently, all methods make GET requests. If a method makes a request with a body payload,\n    // remember to add {'Content-Type': 'application/json'} to the header.\n    const runRequest = () => fetch(url, {\n      method: requestMethod,\n      headers: {\n        Authorization: this.authorization,\n        'x-request-id': baseRequestId && `${baseRequestId}-span-${spanCounter++}`,\n        ...this.headers\n      } as HeadersInit,\n      credentials: this.credentials,\n      body: requestMethod === 'POST' ? JSON.stringify(params) : null,\n      signal: signal || this.signal || (this.fetchTimeout ? AbortSignal.timeout(this.fetchTimeout) : undefined),\n    });\n\n    return {\n      /* eslint no-unsafe-finally: off */\n      async subscribe(callback) {\n        try {\n          const result = await runRequest();\n          return callback(result, () => this.subscribe(callback));\n        } catch (e) {\n          const result: ErrorResponse = { error: 'network Error' };\n          return callback(result, () => this.subscribe(callback));\n        }\n      }\n    };\n  }\n}\n\nexport default HttpTransport;\n","export default class RequestError extends Error {\n  public response: any;\n\n  public status: number;\n\n  public constructor(message: string, response: any, status: number) {\n    super(message);\n    this.response = response;\n    this.status = status;\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport ResultSet from './ResultSet';\nimport SqlQuery from './SqlQuery';\nimport Meta from './Meta';\nimport ProgressResult from './ProgressResult';\nimport HttpTransport, { ErrorResponse, ITransport, TransportOptions } from './HttpTransport';\nimport RequestError from './RequestError';\nimport {\n  ExtractTimeMembers,\n  LoadResponse,\n  MetaResponse,\n  PivotQuery,\n  ProgressResponse,\n  Query,\n  QueryOrder,\n  QueryType,\n  TransformedQuery\n} from './types';\n\nexport type LoadMethodCallback<T> = (error: Error | null, resultSet: T) => void;\n\nexport type LoadMethodOptions = {\n  /**\n   * Key to store the current request's MUTEX inside the `mutexObj`. MUTEX object is used to reject orphaned queries results when new queries are sent. For example: if two queries are sent with the same `mutexKey` only the last one will return results.\n   */\n  mutexKey?: string;\n  /**\n   * Object to store MUTEX\n   */\n  mutexObj?: { [key: string]: any };\n  /**\n   * Pass `true` to use continuous fetch behavior.\n   */\n  subscribe?: boolean;\n  /**\n   * A Cube API instance. If not provided will be taken from `CubeProvider`\n   */\n  // eslint-disable-next-line no-use-before-define\n  cubeApi?: CubeApi;\n  /**\n   * If enabled, all members of the 'number' type will be automatically converted to numerical values on the client side\n   */\n  castNumerics?: boolean;\n  /**\n   * Function that receives `ProgressResult` on each `Continue wait` message.\n   */\n  progressCallback?(result: ProgressResult): void;\n  /**\n   * AbortSignal to cancel requests\n   */\n  signal?: AbortSignal;\n};\n\nexport type DeeplyReadonly<T> = {\n  readonly [K in keyof T]: DeeplyReadonly<T[K]>;\n};\n\nexport type ExtractMembers<T extends DeeplyReadonly<Query>> =\n  | (T extends { dimensions: readonly (infer Names)[]; } ? Names : never)\n  | (T extends { measures: readonly (infer Names)[]; } ? Names : never)\n  | (T extends { timeDimensions: (infer U); } ? ExtractTimeMembers<U> : never);\n\n// If we can't infer any members at all, then return any.\nexport type SingleQueryRecordType<T extends DeeplyReadonly<Query>> = ExtractMembers<T> extends never\n  ? any\n  : { [K in string & ExtractMembers<T>]: string | number | boolean | null };\n\nexport type QueryArrayRecordType<T extends DeeplyReadonly<Query[]>> =\n  T extends readonly [infer First, ...infer Rest]\n    ? SingleQueryRecordType<DeeplyReadonly<First>> | QueryArrayRecordType<Rest & DeeplyReadonly<Query[]>>\n    : never;\n\nexport type QueryRecordType<T extends DeeplyReadonly<Query | Query[]>> =\n  T extends DeeplyReadonly<Query[]> ? QueryArrayRecordType<T> :\n    T extends DeeplyReadonly<Query> ? SingleQueryRecordType<T> :\n      never;\n\nexport interface UnsubscribeObj {\n  /**\n   * Allows to stop requests in-flight in long polling or web socket subscribe loops.\n   * It doesn't cancel any submitted requests to the underlying databases.\n   */\n  unsubscribe(): Promise<void>;\n}\n\n/**\n * @deprecated use DryRunResponse\n */\nexport type TDryRunResponse = {\n  queryType: QueryType;\n  normalizedQueries: Query[];\n  pivotQuery: PivotQuery;\n  queryOrder: Array<{ [k: string]: QueryOrder }>;\n  transformedQueries: TransformedQuery[];\n};\n\nexport type DryRunResponse = {\n  queryType: QueryType;\n  normalizedQueries: Query[];\n  pivotQuery: PivotQuery;\n  queryOrder: Array<{ [k: string]: QueryOrder }>;\n  transformedQueries: TransformedQuery[];\n};\n\ninterface BodyResponse {\n  error?: string;\n  [key: string]: any;\n}\n\nlet mutexCounter = 0;\n\nconst MUTEX_ERROR = 'Mutex has been changed';\n\nfunction mutexPromise(promise: Promise<any>) {\n  return promise\n    .then((result) => result)\n    .catch((error) => {\n      if (error !== MUTEX_ERROR) {\n        throw error;\n      }\n    });\n}\n\nexport type ResponseFormat = 'compact' | 'default' | undefined;\n\nexport type CubeApiOptions = {\n  /**\n   * URL of your Cube.js Backend. By default, in the development environment it is `http://localhost:4000/cubejs-api/v1`\n   */\n  apiUrl: string;\n  /**\n   * Transport implementation to use. [HttpTransport](#http-transport) will be used by default.\n   */\n  transport?: ITransport<any>;\n  method?: TransportOptions['method'];\n  headers?: TransportOptions['headers'];\n  pollInterval?: number;\n  credentials?: TransportOptions['credentials'];\n  parseDateMeasures?: boolean;\n  resType?: 'default' | 'compact';\n  castNumerics?: boolean;\n  /**\n   * How many network errors would be retried before returning to users. Default to 0.\n   */\n  networkErrorRetries?: number;\n  /**\n   * AbortSignal to cancel requests\n   */\n  signal?: AbortSignal;\n  /**\n   * Fetch timeout in milliseconds. Would be passed as AbortSignal.timeout()\n   */\n  fetchTimeout?: number;\n};\n\n/**\n * Main class for accessing Cube API\n */\nclass CubeApi {\n  private readonly apiToken: string | (() => Promise<string>) | (CubeApiOptions & any[]) | undefined;\n\n  private readonly apiUrl: string;\n\n  private readonly method: TransportOptions['method'];\n\n  private readonly headers: TransportOptions['headers'];\n\n  private readonly credentials: TransportOptions['credentials'];\n\n  protected readonly transport: ITransport<any>;\n\n  private readonly pollInterval: number;\n\n  private readonly parseDateMeasures: boolean | undefined;\n\n  private readonly castNumerics: boolean;\n\n  private readonly networkErrorRetries: number;\n\n  private updateAuthorizationPromise: Promise<any> | null;\n\n  public constructor(apiToken: string | (() => Promise<string>) | undefined, options: CubeApiOptions);\n\n  public constructor(options: CubeApiOptions);\n\n  /**\n   * Creates an instance of the `CubeApi`. The API entry point.\n   *\n   * ```js\n   * import cube from '@cubejs-client/core';\n   * const cubeApi = cube(\n   *   'CUBE-API-TOKEN',\n   *   { apiUrl: 'http://localhost:4000/cubejs-api/v1' }\n   * );\n   * ```\n   *\n   * You can also pass an async function or a promise that will resolve to the API token\n   *\n   * ```js\n   * import cube from '@cubejs-client/core';\n   * const cubeApi = cube(\n   *   async () => await Auth.getJwtToken(),\n   *   { apiUrl: 'http://localhost:4000/cubejs-api/v1' }\n   * );\n   * ```\n   */\n  public constructor(\n    apiToken: string | (() => Promise<string>) | undefined | CubeApiOptions,\n    options?: CubeApiOptions\n  ) {\n    if (apiToken && !Array.isArray(apiToken) && typeof apiToken === 'object') {\n      options = apiToken;\n      apiToken = undefined;\n    }\n\n    if (!options || (!options.transport && !options.apiUrl)) {\n      throw new Error('The `apiUrl` option is required');\n    }\n\n    this.apiToken = apiToken;\n    this.apiUrl = options.apiUrl;\n    this.method = options.method;\n    this.headers = options.headers || {};\n    this.credentials = options.credentials;\n\n    this.transport = options.transport || new HttpTransport({\n      authorization: typeof apiToken === 'string' ? apiToken : undefined,\n      apiUrl: this.apiUrl,\n      method: this.method,\n      headers: this.headers,\n      credentials: this.credentials,\n      fetchTimeout: options.fetchTimeout,\n      signal: options.signal\n    });\n\n    this.pollInterval = options.pollInterval || 5;\n    this.parseDateMeasures = options.parseDateMeasures;\n    this.castNumerics = typeof options.castNumerics === 'boolean' ? options.castNumerics : false;\n    this.networkErrorRetries = options.networkErrorRetries || 0;\n\n    this.updateAuthorizationPromise = null;\n  }\n\n  protected request(method: string, params?: any) {\n    return this.transport.request(method, {\n      baseRequestId: uuidv4(),\n      ...params\n    });\n  }\n\n  private loadMethod(request: CallableFunction, toResult: CallableFunction, options?: LoadMethodOptions, callback?: CallableFunction) {\n    const mutexValue = ++mutexCounter;\n    if (typeof options === 'function' && !callback) {\n      callback = options;\n      options = undefined;\n    }\n\n    options = options || {};\n\n    const mutexKey = options.mutexKey || 'default';\n    if (options.mutexObj) {\n      options.mutexObj[mutexKey] = mutexValue;\n    }\n\n    const requestPromise = this\n      .updateTransportAuthorization()\n      .then(() => request());\n\n    let skipAuthorizationUpdate = true;\n    let unsubscribed = false;\n\n    const checkMutex = async () => {\n      const requestInstance = await requestPromise;\n\n      if (options &&\n        options.mutexObj &&\n          options.mutexObj[mutexKey] !== mutexValue\n      ) {\n        unsubscribed = true;\n        if (requestInstance.unsubscribe) {\n          await requestInstance.unsubscribe();\n        }\n        throw MUTEX_ERROR;\n      }\n    };\n\n    let networkRetries = this.networkErrorRetries;\n\n    const loadImpl = async (response: Response | ErrorResponse, next: CallableFunction) => {\n      const requestInstance = await requestPromise;\n\n      const subscribeNext = async () => {\n        if (options?.subscribe && !unsubscribed) {\n          if (requestInstance.unsubscribe) {\n            return next();\n          } else {\n            await new Promise<void>(resolve => setTimeout(() => resolve(), this.pollInterval * 1000));\n            return next();\n          }\n        }\n        return null;\n      };\n\n      const continueWait = async (wait: boolean = false) => {\n        if (!unsubscribed) {\n          if (wait) {\n            await new Promise<void>(resolve => setTimeout(() => resolve(), this.pollInterval * 1000));\n          }\n          return next();\n        }\n        return null;\n      };\n\n      if (options?.subscribe && !skipAuthorizationUpdate) {\n        await this.updateTransportAuthorization();\n      }\n\n      skipAuthorizationUpdate = false;\n\n      if (('status' in response && response.status === 502) ||\n        ('error' in response && response.error?.toLowerCase() === 'network error') &&\n        --networkRetries >= 0\n      ) {\n        await checkMutex();\n        return continueWait(true);\n      }\n\n      // From here we're sure that response is only fetch Response\n      response = (response as Response);\n      let body: BodyResponse = {};\n      let text = '';\n      try {\n        text = await response.text();\n        body = JSON.parse(text);\n      } catch (_) {\n        body.error = text;\n      }\n\n      if (body.error === 'Continue wait') {\n        await checkMutex();\n        if (options?.progressCallback) {\n          options.progressCallback(new ProgressResult(body as ProgressResponse));\n        }\n        return continueWait();\n      }\n\n      if (response.status !== 200) {\n        await checkMutex();\n        if (!options?.subscribe && requestInstance.unsubscribe) {\n          await requestInstance.unsubscribe();\n        }\n\n        const error = new RequestError(body.error || '', body, response.status);\n        if (callback) {\n          callback(error);\n        } else {\n          throw error;\n        }\n\n        return subscribeNext();\n      }\n      await checkMutex();\n      if (!options?.subscribe && requestInstance.unsubscribe) {\n        await requestInstance.unsubscribe();\n      }\n      const result = toResult(body);\n      if (callback) {\n        callback(null, result);\n      } else {\n        return result;\n      }\n\n      return subscribeNext();\n    };\n\n    const promise = requestPromise.then(requestInstance => mutexPromise(requestInstance.subscribe(loadImpl)));\n\n    if (callback) {\n      return {\n        unsubscribe: async () => {\n          const requestInstance = await requestPromise;\n\n          unsubscribed = true;\n          if (requestInstance.unsubscribe) {\n            return requestInstance.unsubscribe();\n          }\n          return null;\n        }\n      };\n    } else {\n      return promise;\n    }\n  }\n\n  private async updateTransportAuthorization() {\n    if (this.updateAuthorizationPromise) {\n      await this.updateAuthorizationPromise;\n      return;\n    }\n\n    const tokenFetcher = this.apiToken;\n\n    if (typeof tokenFetcher === 'function') {\n      const promise = (async () => {\n        try {\n          const token = await tokenFetcher();\n\n          if (this.transport.authorization !== token) {\n            this.transport.authorization = token;\n          }\n        } finally {\n          this.updateAuthorizationPromise = null;\n        }\n      })();\n\n      this.updateAuthorizationPromise = promise;\n      await promise;\n    }\n  }\n\n  /**\n   * Add system properties to a query object.\n   */\n  private patchQueryInternal(query: DeeplyReadonly<Query>, responseFormat: ResponseFormat): DeeplyReadonly<Query> {\n    if (\n      responseFormat === 'compact' &&\n      query.responseFormat !== 'compact'\n    ) {\n      return {\n        ...query,\n        responseFormat: 'compact',\n      };\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * Process result fetched from the gateway#load method according\n   * to the network protocol.\n   */\n  protected loadResponseInternal(response: LoadResponse<any>, options: LoadMethodOptions | null = {}): ResultSet<any> {\n    if (\n      response.results.length\n    ) {\n      if (options?.castNumerics) {\n        response.results.forEach((result) => {\n          const numericMembers = Object.entries({\n            ...result.annotation.measures,\n            ...result.annotation.dimensions,\n          }).reduce<string[]>((acc, [k, v]) => {\n            if (v.type === 'number') {\n              acc.push(k);\n            }\n            return acc;\n          }, []);\n\n          result.data = result.data.map((row) => {\n            numericMembers.forEach((key) => {\n              if (row[key] != null) {\n                row[key] = Number(row[key]);\n              }\n            });\n\n            return row;\n          });\n        });\n      }\n\n      if (response.results[0].query.responseFormat &&\n        response.results[0].query.responseFormat === 'compact') {\n        response.results.forEach((result, j) => {\n          const data: Record<string, any>[] = [];\n          const { dataset, members } = result.data as unknown as { dataset: any[]; members: string[] };\n          dataset.forEach((r) => {\n            const row: Record<string, any> = {};\n            members.forEach((m, i) => {\n              row[m] = r[i];\n            });\n            data.push(row);\n          });\n          response.results[j].data = data;\n        });\n      }\n    }\n\n    return new ResultSet(response, {\n      parseDateMeasures: this.parseDateMeasures\n    });\n  }\n\n  public load<QueryType extends DeeplyReadonly<Query | Query[]>>(\n    query: QueryType,\n    options?: LoadMethodOptions,\n  ): Promise<ResultSet<QueryRecordType<QueryType>>>;\n\n  public load<QueryType extends DeeplyReadonly<Query | Query[]>>(\n    query: QueryType,\n    options?: LoadMethodOptions,\n    callback?: LoadMethodCallback<ResultSet<QueryRecordType<QueryType>>>,\n  ): UnsubscribeObj;\n\n  public load<QueryType extends DeeplyReadonly<Query | Query[]>>(\n    query: QueryType,\n    options?: LoadMethodOptions,\n    callback?: LoadMethodCallback<ResultSet<any>>,\n    responseFormat?: string\n  ): Promise<ResultSet<QueryRecordType<QueryType>>>;\n\n  /**\n   * Fetch data for the passed `query`.\n   *\n   * ```js\n   * import cube from '@cubejs-client/core';\n   * import Chart from 'chart.js';\n   * import chartjsConfig from './toChartjsData';\n   *\n   * const cubeApi = cube('CUBEJS_TOKEN');\n   *\n   * const resultSet = await cubeApi.load({\n   *  measures: ['Stories.count'],\n   *  timeDimensions: [{\n   *    dimension: 'Stories.time',\n   *    dateRange: ['2015-01-01', '2015-12-31'],\n   *    granularity: 'month'\n   *   }]\n   * });\n   *\n   * const context = document.getElementById('myChart');\n   * new Chart(context, chartjsConfig(resultSet));\n   * ```\n   * @param query - [Query object](/product/apis-integrations/rest-api/query-format)\n   * @param options\n   * @param callback\n   * @param responseFormat\n   */\n  public load<QueryType extends DeeplyReadonly<Query | Query[]>>(query: QueryType, options?: LoadMethodOptions, callback?: CallableFunction, responseFormat: ResponseFormat = 'default') {\n    [query, options] = this.prepareQueryOptions(query, options, responseFormat);\n    return this.loadMethod(\n      () => this.request('load', {\n        query,\n        queryType: 'multi',\n        signal: options?.signal\n      }),\n      (response: any) => this.loadResponseInternal(response, options),\n      options,\n      callback\n    );\n  }\n\n  private prepareQueryOptions<QueryType extends DeeplyReadonly<Query | Query[]>>(query: QueryType, options?: LoadMethodOptions | null, responseFormat: ResponseFormat = 'default'): [query: QueryType, options: LoadMethodOptions] {\n    options = {\n      castNumerics: this.castNumerics,\n      ...options\n    };\n\n    if (responseFormat === 'compact') {\n      if (Array.isArray(query)) {\n        const patched = query.map((q) => this.patchQueryInternal(q, 'compact'));\n        return [patched as unknown as QueryType, options];\n      } else {\n        const patched = this.patchQueryInternal(query as DeeplyReadonly<Query>, 'compact');\n        return [patched as QueryType, options];\n      }\n    }\n\n    return [query, options];\n  }\n\n  /**\n   * Allows you to fetch data and receive updates over time. See [Real-Time Data Fetch](/product/apis-integrations/rest-api/real-time-data-fetch)\n   *\n   * ```js\n   * // Subscribe to a query's updates\n   * const subscription = await cubeApi.subscribe(\n   *   {\n   *     measures: ['Logs.count'],\n   *     timeDimensions: [\n   *       {\n   *         dimension: 'Logs.time',\n   *         granularity: 'hour',\n   *         dateRange: 'last 1440 minutes',\n   *       },\n   *     ],\n   *   },\n   *   options,\n   *   (error, resultSet) => {\n   *     if (!error) {\n   *       // handle the update\n   *     }\n   *   }\n   * );\n   *\n   * // Unsubscribe from a query's updates\n   * subscription.unsubscribe();\n   * ```\n   */\n  public subscribe<QueryType extends DeeplyReadonly<Query | Query[]>>(\n    query: QueryType,\n    options: LoadMethodOptions | null,\n    callback: LoadMethodCallback<ResultSet<QueryRecordType<QueryType>>>,\n    responseFormat: ResponseFormat = 'default'\n  ): UnsubscribeObj {\n    [query, options] = this.prepareQueryOptions(query, options, responseFormat);\n    return this.loadMethod(\n      () => this.request('subscribe', {\n        query,\n        queryType: 'multi',\n        signal: options?.signal\n      }),\n      (response: any) => this.loadResponseInternal(response, options),\n      { ...options, subscribe: true },\n      callback\n    ) as UnsubscribeObj;\n  }\n\n  public sql(query: DeeplyReadonly<Query | Query[]>, options?: LoadMethodOptions): Promise<SqlQuery>;\n\n  public sql(query: DeeplyReadonly<Query | Query[]>, options?: LoadMethodOptions, callback?: LoadMethodCallback<SqlQuery>): UnsubscribeObj;\n\n  /**\n   * Get generated SQL string for the given `query`.\n   */\n  public sql(query: DeeplyReadonly<Query | Query[]>, options?: LoadMethodOptions, callback?: LoadMethodCallback<SqlQuery>): Promise<SqlQuery> | UnsubscribeObj {\n    return this.loadMethod(\n      () => this.request('sql', {\n        query,\n        signal: options?.signal\n      }),\n      (response: any) => (Array.isArray(response) ? response.map((body) => new SqlQuery(body)) : new SqlQuery(response)),\n      options,\n      callback\n    );\n  }\n\n  public meta(options?: LoadMethodOptions): Promise<Meta>;\n\n  public meta(options?: LoadMethodOptions, callback?: LoadMethodCallback<Meta>): UnsubscribeObj;\n\n  /**\n   * Get meta description of cubes available for querying.\n   */\n  public meta(options?: LoadMethodOptions, callback?: LoadMethodCallback<Meta>): Promise<Meta> | UnsubscribeObj {\n    return this.loadMethod(\n      () => this.request('meta', {\n        signal: options?.signal\n      }),\n      (body: MetaResponse) => new Meta(body),\n      options,\n      callback\n    );\n  }\n\n  public dryRun(query: DeeplyReadonly<Query | Query[]>, options?: LoadMethodOptions): Promise<DryRunResponse>;\n\n  public dryRun(query: DeeplyReadonly<Query | Query[]>, options: LoadMethodOptions, callback?: LoadMethodCallback<DryRunResponse>): UnsubscribeObj;\n\n  /**\n   * Get query related meta without query execution\n   */\n  public dryRun(query: DeeplyReadonly<Query | Query[]>, options?: LoadMethodOptions, callback?: LoadMethodCallback<DryRunResponse>): Promise<DryRunResponse> | UnsubscribeObj {\n    return this.loadMethod(\n      () => this.request('dry-run', {\n        query,\n        signal: options?.signal\n      }),\n      (response: DryRunResponse) => response,\n      options,\n      callback\n    );\n  }\n}\n\nexport default (apiToken: string | (() => Promise<string>), options: CubeApiOptions) => new CubeApi(apiToken, options);\n\nexport { CubeApi };\nexport { default as Meta } from './Meta';\nexport { default as SqlQuery } from './SqlQuery';\nexport { default as RequestError } from './RequestError';\nexport { default as ProgressResult } from './ProgressResult';\nexport { default as ResultSet } from './ResultSet';\nexport * from './HttpTransport';\nexport * from './utils';\nexport * from './time';\nexport * from './types';\n","import cube, * as clientCoreExports from './index';\n\nconst cubeAll: any = cube;\n\nObject.keys(clientCoreExports).forEach((key) => {\n  cubeAll[key] = (clientCoreExports as Record<string, any>)[key];\n});\n\nexport default cubeAll;\n"],"names":["dayjs","extend","quarterOfYear","duration","isoWeek","GRANULARITIES","name","undefined","title","DEFAULT_GRANULARITY","internalDayjs","apply","arguments","locale","_objectSpread","en","weekStart","TIME_SERIES","day","range","by","map","d","format","month","snapTo","year","hour","minute","second","week","startOf","quarter","isPredefinedGranularity","granularity","DateRegex","LocalDateRegex","dayRange","from","to","value","results","start","end","isBefore","isSame","push","add","endOf","parseSqlInterval","intervalStr","interval","parts","split","i","length","parseInt","unit","singularUnit","endsWith","slice","addInterval","date","res","clone","Object","entries","forEach","_ref","_ref2","_slicedToArray","key","subtractInterval","_ref3","_ref4","subtract","alignToOrigin","startDate","origin","alignedDate","intervalOp","isIntervalNegative","offsetDate","isAfter","timeSeriesFromCustomInterval","intervalParsed","offset","alignedStart","dates","diffTimeUnitForInterval","test","granularityOrder","minGranularityForIntervals","i1","i2","g1","g2","g1pos","indexOf","g2pos","granularityFor","dateStr","dayjsDate","hours","minutes","seconds","milliseconds","millisecond","weekDay","isoWeekday","removeEmptyQueryFields","_query","query","fromPairs","toPairs","flatMap","includes","Array","isArray","keys","validateQuery","filters","filter","f","timeDimensions","td","dateRange","areQueriesEqual","query1","query2","equals","order","defaultOrder","find","_defineProperty","dimension","measures","dimensions","defaultHeuristics","newState","oldQuery","options","_clone","props","_objectWithoutProperties","_excluded","meta","sessionGranularity","state","shouldApplyHeuristicOrder","pivotConfig","newQuery","_ref6","_ref7","defaultTimeDimension","defaultTimeDimensionNameFor","chartType","newChartType","_ref8","_ref9","_ref10","_ref11","isQueryPresent","every","q","_q$measures","_q$dimensions","_q$timeDimensions","movePivotItem","sourceIndex","destinationIndex","sourceAxis","destinationAxis","nextPivotConfig","x","_toConsumableArray","y","id","lastIndex","splice","moveItemInArray","list","result","_result$splice","_result$splice2","removed","flattenFilters","reduce","memo","concat","or","and","getQueryMembers","members","Set","member","getOrderMembersFromOrder","orderMembers","ids","indexedOrderMembers","indexBy","prop","nextOrderMembers","_ref12","_ref13","memberId","currentOrder","has","aliasSeries","values","index","_pivotConfig$aliasSer","duplicateMeasures","nonNullValues","groupByToPairs","groupByToPairsImpl","keyFn","acc","Map","data","row","set","get","unnest","arr","subArr","element","QUERY_TYPE","REGULAR_QUERY","COMPARE_DATE_RANGE_QUERY","BLENDING_QUERY","ResultSet","loadResponse","_classCallCheck","queryType","loadResponses","pivotQuery","Error","parseDateMeasures","backwardCompatibleData","_createClass","drillDown","drillDownLocator","_drillDownLocator$xVa","_drillDownLocator$yVa","_measures$measureName","_measures$measureName2","xValues","yValues","normalizedPivotConfig","normalizePivotConfig","currentIndex","_this$query","_this$query$filters","parentFilters","_this$query$segments","segments","annotation","measureName","_Object$keys","_Object$keys2","drillMembers","operator","_ref5","_member$split","_member$split2","cubeName","_query$timeDimensions","originalTimeDimension","_originalTimeDimensio","originalStart","originalEnd","join","dt","toString","drillMembersGrouped","timezone","series","_this","seriesNames","shortTitle","chartPivot","obj","axisValues","axis","resultIndex","measure","val","axisValuesString","delimiter","formatValue","v","getNormalizedPivotConfig","timeSeries","timeDimension","annotations","timeDimensionMember","rawRows","timeDimensionBackwardCompatibleData","Boolean","minBy","toDate","maxBy","padToDay","match","_dateRange","_dateRange2","pivot","_this2","pivotImpl","groupByXAxis","measureValue","fillWithValue","fillMissingDates","rows","_series$resultIndex$m","_series$resultIndex","byXValues","groupBy","xGrouped","pipe","yValuesMap","_ref14","_ref15","allYValues","measureOnX","_ref16","_ref17","yGrouped","_ref18","yValuesArray","measureFromAxis","pivots","_","mergePivots","joinDateRange","minLengthPivot","current","_pivot$index","_this3","validate","Date","Number","isNaN","parseFloat","allMeasures","flatten","_ref19","_query$measures","e","a","m","_ref20","_ref21","_ref22","tablePivot","isMeasuresPresent","_ref23","_xValues$index","_ref24","_ref25","tableColumns","_pivot$","r","mergeDeepLeft","flatMeta","b","schema","extractFields","_ref26","type","_ref27","_ref28","currentItem","_currentItem","children","toColumns","item","path","_ref29","_excluded2","_extractFields","fields","_excluded3","dimensionValue","dataIndex","trim","otherColumns","totalRow","categories","_this4","uniq","_ref30","_query$measures2","aliasedAxis","dropLast","totalRows","total","rawData","_this$loadResponses$r","field","foundTd","decompose","_this5","serialize","deserialize","defaultPivotConfig","_ref31","_ref31$measures","_ref31$dimensions","substituteTimeDimensionMembers","subDim","allIncludedDimensions","allDimensions","dimensionFilter","unshift","SqlQuery","sqlQuery","rawQuery","sql","memberMap","memberArray","operators","string","number","time","Meta","metaResponse","cubes","cubesMap","c","membersForQuery","memberType","sort","membersGroupedByCube","memberKeys","cube","cubeTitle","resolveMember","memberName","_memberName$split","_memberName$split2","error","memberTypes","_memberName$split3","_memberName$split4","filterOperatorsForMember","ProgressResult","progressResponse","stage","timeElapsed","HttpTransport","authorization","apiUrl","method","_ref$headers","headers","credentials","fetchTimeout","signal","request","baseRequestId","params","spanCounter","searchParams","URLSearchParams","k","_typeof","JSON","stringify","url","requestMethod","runRequest","fetch","Authorization","body","AbortSignal","timeout","subscribe","callback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_result","wrap","_callee$","_context","prev","next","sent","abrupt","t0","stop","RequestError","_Error","message","response","status","_callSuper","_inherits","_wrapNativeSuper","mutexCounter","MUTEX_ERROR","mutexPromise","promise","then","CubeApi","apiToken","transport","pollInterval","castNumerics","networkErrorRetries","updateAuthorizationPromise","uuidv4","loadMethod","toResult","mutexValue","mutexKey","mutexObj","requestPromise","updateTransportAuthorization","skipAuthorizationUpdate","unsubscribed","checkMutex","requestInstance","unsubscribe","networkRetries","loadImpl","_callee4","_options2","_response$error","_options5","subscribeNext","continueWait","text","_options3","_options4","_error","_callee4$","_context4","_callee2","_options","_callee2$","_context2","Promise","resolve","setTimeout","_callee3","wait","_args3","_callee3$","_context3","toLowerCase","parse","progressCallback","_x","_x2","_unsubscribe","_callee5","_callee5$","_context5","_updateTransportAuthorization","_callee7","tokenFetcher","_callee7$","_context7","_callee6","token","_callee6$","_context6","finish","patchQueryInternal","responseFormat","loadResponseInternal","numericMembers","j","dataset","load","_this$prepareQueryOpt","prepareQueryOptions","_this$prepareQueryOpt2","_options6","patched","_this$prepareQueryOpt3","_this$prepareQueryOpt4","_options7","_this6","_this7","dryRun","_this8","cubeAll","clientCoreExports"],"mappings":"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"}